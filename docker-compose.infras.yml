# TiHoMo Infrastructure Services
# Tất cả các services hạ tầng: Database, Cache, Message Queue, Monitoring

services:
  # ================================
  # UNIFIED DATABASE
  # ================================
  
  # Single PostgreSQL instance for all services
  postgres:
    image: postgres:17.6
    container_name: tihomo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_SUPER_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_SUPER_PASSWORD:-postgres123}
      POSTGRES_DB: postgres
      # Environment variables for database initialization
      IDENTITY_DB_PASSWORD: ${IDENTITY_DB_PASSWORD}
      COREFINANCE_DB_PASSWORD: ${COREFINANCE_DB_PASSWORD}
      MONEYMANAGEMENT_DB_PASSWORD: ${MONEYMANAGEMENT_DB_PASSWORD}
      PLANNINGINVESTMENT_DB_PASSWORD: ${PLANNINGINVESTMENT_DB_PASSWORD}
      REPORTING_DB_PASSWORD: ${REPORTING_DB_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"  # LOCAL DEVELOPMENT ONLY - disabled in production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-unified-db.sql:/docker-entrypoint-initdb.d/init.sql.template
      - ./scripts/init-unified-db.sh:/docker-entrypoint-initdb.d/01-init-wrapper.sh
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_SUPER_USER:-postgres}"]
      interval: 15s
      timeout: 10s
      retries: 8

  # Redis for Caching and Session Storage
  redis:
    image: redis:8-alpine
    container_name: tihomo-redis
    restart: unless-stopped
    # ports:
    #   - "${REDIS_PORT}:6379"  # Internal only
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} ${REDIS_PERSISTENCE_CONFIG:-}
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # MESSAGE QUEUE & EVENT STREAMING
  # ================================

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:4-management
    container_name: tihomo-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: tihomo
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    # ports:
    #   - "${RABBITMQ_PORT}:5672"   # AMQP port - Internal only
    #   - "${RABBITMQ_MANAGEMENT_PORT}:15672" # Management UI - Access via Gateway/Nginx if needed
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - tihomo-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: tihomo-prometheus
    restart: unless-stopped
    # ports:
    #   - "${PROMETHEUS_PORT}:9090"  # Internal only - access via Grafana
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-200h}'
      - '--web.enable-lifecycle'
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Dashboards and Visualization
  grafana:
    image: grafana/grafana:12.1.1
    container_name: tihomo-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=${GRAFANA_ANALYTICS_ENABLED:-true}
      - GF_ANALYTICS_CHECK_FOR_UPDATES=${GRAFANA_CHECK_UPDATES:-true}
      - GF_FEATURE_TOGGLES_ENABLE=traceToLogs,correlations,traces,nodeGraph,tracing
      - GF_PLUGINS_ENABLE_ALPHA=true
    # ports:
    #   - "${GRAFANA_PORT}:3000"  # Access via Gateway proxy if needed
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tihomo-network
    depends_on:
      - prometheus
      - loki
      - tempo
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:3.4.1
    container_name: tihomo-loki
    restart: unless-stopped
    # ports:
    #   - "${LOKI_PORT}:3100"  # Internal only
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Tempo for Distributed Tracing
  tempo:
    image: grafana/tempo:2.8.0
    container_name: tihomo-tempo
    restart: unless-stopped
    user: root
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./config/tempo.yml:/etc/tempo/tempo.yaml
      - tempo_data:/tmp/tempo
    # ports:
    #   - "3200:3200"   # Tempo HTTP API - Internal only
    #   - "4317:4317"   # OTLP gRPC receiver - Internal only
    #   - "4318:4318"   # OTLP HTTP receiver - Internal only
    #   - "9411:9411"   # Zipkin receiver - Internal only
    #   - "14268:14268" # Jaeger HTTP receiver - Internal only
    #   - "14250:14250" # Jaeger gRPC receiver - Internal only
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # DEVELOPMENT TOOLS
  # ================================

  # pgAdmin for Database Management
  # QUAN TRỌNG: Giữ pgAdmin và expose port để làm secure proxy layer cho database
  # External tools connect qua pgAdmin, không direct vào PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tihomo-pgadmin
    restart: unless-stopped
    profiles:
      - ${ENABLE_DEV_TOOLS:-development}
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tihomo.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT}:80"  # ĐÂY LÀ PORT THỨ 2 ĐƯỢC EXPOSE (sau Gateway)
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers-unified.json:/pgadmin4/servers.json
    networks:
      - tihomo-network
    depends_on:
      - postgres

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tihomo-mailhog
    restart: unless-stopped
    profiles:
      - ${ENABLE_DEV_TOOLS:-development}
    # ports:
    #   - "${MAILHOG_SMTP_PORT}:1025" # SMTP - Internal only
    #   - "${MAILHOG_UI_PORT}:8025" # Web UI - Access via Gateway proxy if needed
    networks:
      - tihomo-network

  # ================================
  # REVERSE PROXY & LOAD BALANCER
  # ================================

  # Nginx for Development Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tihomo-nginx
    restart: unless-stopped
    # ports:
    #   - "${NGINX_HTTP_PORT}:80"  # Use Gateway instead
    #   - "${NGINX_HTTPS_PORT}:443"  # Use Gateway instead
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/ssl:/etc/nginx/ssl
    networks:
      - tihomo-network

# ================================
# NETWORKS
# ================================
networks:
  tihomo-network:
    name: tihomo-network  # Đặt tên cố định, không để Docker tự thêm prefix
    driver: bridge

# ================================
# VOLUMES
# ================================
volumes:
  # Single database volume
  postgres_data:
    driver: local
  
  # Cache and message queue volumes
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  
  # Development tools volumes
  pgadmin_data:
    driver: local