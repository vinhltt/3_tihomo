// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyManagement.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MoneyManagement.Infrastructure.Migrations
{
    [DbContext(typeof(MoneyManagementDbContext))]
    [Migration("20250623002246_UpdatePendingChanges")]
    partial class UpdatePendingChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MoneyManagement.Domain.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("AlertThreshold")
                        .HasColumnType("numeric")
                        .HasColumnName("alert_threshold");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("budget_amount");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_notifications");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("Period")
                        .HasColumnType("integer")
                        .HasColumnName("period");

                    b.Property<decimal>("SpentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("spent_amount");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_budgets");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_budgets_id");

                    b.HasIndex("UserId", "Period")
                        .HasDatabaseName("IX_Budget_UserId_Period");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_Budget_UserId_Status");

                    b.ToTable("budgets", (string)null);
                });

            modelBuilder.Entity("MoneyManagement.Domain.Entities.Jar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("allocation_percentage");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color_code");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<int>("JarType")
                        .HasColumnType("integer")
                        .HasColumnName("jar_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("TargetAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("target_amount");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_jars");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_jars_id");

                    b.HasIndex("UserId", "JarType")
                        .HasDatabaseName("IX_Jar_UserId_JarType");

                    b.ToTable("jars", (string)null);
                });

            modelBuilder.Entity("MoneyManagement.Domain.Entities.SharedExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expense_date");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("group_name");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("ReceiptImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("receipt_image_url");

                    b.Property<decimal>("SettledAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("settled_amount");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shared_expenses");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_shared_expenses_id");

                    b.HasIndex("CreatedByUserId", "Status")
                        .HasDatabaseName("IX_SharedExpense_CreatedByUserId_Status");

                    b.ToTable("shared_expenses", (string)null);
                });

            modelBuilder.Entity("MoneyManagement.Domain.Entities.SharedExpenseParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("paid_amount");

                    b.Property<string>("ParticipantName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("participant_name");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("settled_date");

                    b.Property<decimal>("ShareAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("share_amount");

                    b.Property<Guid?>("SharedExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("shared_expense_id");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_shared_expense_participants");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_shared_expense_participants_id");

                    b.HasIndex("SharedExpenseId", "UserId")
                        .HasDatabaseName("IX_SharedExpenseParticipant_SharedExpenseId_UserId");

                    b.ToTable("shared_expense_participants", (string)null);
                });

            modelBuilder.Entity("MoneyManagement.Domain.Entities.SharedExpenseParticipant", b =>
                {
                    b.HasOne("MoneyManagement.Domain.Entities.SharedExpense", "SharedExpense")
                        .WithMany("Participants")
                        .HasForeignKey("SharedExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_shared_expense_participants_shared_expenses_shared_expense_");

                    b.Navigation("SharedExpense");
                });

            modelBuilder.Entity("MoneyManagement.Domain.Entities.SharedExpense", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
