// <auto-generated />
using System;
using CoreFinance.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreFinance.Infrastructure.Migrations
{
    [DbContext(typeof(CoreFinanceDbContext))]
    [Migration("20250813053354_RemoveUserIdFromEntities")]
    partial class RemoveUserIdFromEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreFinance.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("AvailableLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("available_limit");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("card_number");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("current_balance");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("initial_balance");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_accounts_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.ExpectedTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("ActualTransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("actual_transaction_id");

                    b.Property<string>("AdjustmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("adjustment_reason");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<decimal>("ExpectedAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("expected_amount");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expected_date");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("generated_at");

                    b.Property<bool>("IsAdjusted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_adjusted");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("OriginalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("original_amount");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<Guid?>("RecurringTransactionTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurring_transaction_template_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_expected_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_expected_transactions_account_id");

                    b.HasIndex("ActualTransactionId")
                        .HasDatabaseName("ix_expected_transactions_actual_transaction_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_expected_transactions_id");

                    b.HasIndex("RecurringTransactionTemplateId")
                        .HasDatabaseName("ix_expected_transactions_recurring_transaction_template_id");

                    b.ToTable("expected_transactions", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.RecurringTransactionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<bool>("AutoGenerate")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_generate");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cron_expression");

                    b.Property<int?>("CustomIntervalDays")
                        .HasColumnType("integer")
                        .HasColumnName("custom_interval_days");

                    b.Property<int>("DaysInAdvance")
                        .HasColumnType("integer")
                        .HasColumnName("days_in_advance");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer")
                        .HasColumnName("frequency");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("NextExecutionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_execution_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_recurring_transaction_templates");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_recurring_transaction_templates_account_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_recurring_transaction_templates_id");

                    b.ToTable("recurring_transaction_templates", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("AvailableLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("available_limit");

                    b.Property<decimal?>("AvailableLimitCompare")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("available_limit_compare");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<decimal?>("BalanceCompare")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance_compare");

                    b.Property<string>("CategorySummary")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("category_summary");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer")
                        .HasColumnName("category_type");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<string>("ImportFrom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("import_from");

                    b.Property<decimal?>("IncreaseCreditLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("increase_credit_limit");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<decimal>("RevenueAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("revenue_amount");

                    b.Property<decimal>("SpentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("spent_amount");

                    b.Property<bool>("SyncMisa")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_misa");

                    b.Property<bool>("SyncSms")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_sms");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("UsedPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("used_percent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("Vn")
                        .HasColumnType("boolean")
                        .HasColumnName("vn");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_transactions_account_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_transactions_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.ExpectedTransaction", b =>
                {
                    b.HasOne("CoreFinance.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_expected_transactions_accounts_account_id");

                    b.HasOne("CoreFinance.Domain.Entities.Transaction", "ActualTransaction")
                        .WithMany()
                        .HasForeignKey("ActualTransactionId")
                        .HasConstraintName("fk_expected_transactions_transactions_actual_transaction_id");

                    b.HasOne("CoreFinance.Domain.Entities.RecurringTransactionTemplate", "RecurringTransactionTemplate")
                        .WithMany("ExpectedTransactions")
                        .HasForeignKey("RecurringTransactionTemplateId")
                        .HasConstraintName("fk_expected_transactions_recurring_transaction_templates_recur");

                    b.Navigation("Account");

                    b.Navigation("ActualTransaction");

                    b.Navigation("RecurringTransactionTemplate");
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.RecurringTransactionTemplate", b =>
                {
                    b.HasOne("CoreFinance.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_recurring_transaction_templates_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CoreFinance.Domain.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_transactions_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreFinance.Domain.Entities.RecurringTransactionTemplate", b =>
                {
                    b.Navigation("ExpectedTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
