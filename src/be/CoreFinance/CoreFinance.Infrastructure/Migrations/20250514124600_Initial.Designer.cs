// <auto-generated />
using System;
using CoreFinance.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreFinance.Infrastructure.Migrations
{
    [DbContext(typeof(CoreFinanceDbContext))]
    [Migration("20250514124600_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreFinance.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("account_name");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<decimal?>("AvailableLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("available_limit");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("card_number");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("current_balance");

                    b.Property<string>("Deleted")
                        .HasColumnType("text")
                        .HasColumnName("deleted");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("initial_balance");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_accounts_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("AvailableLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("available_limit");

                    b.Property<decimal?>("AvailableLimitCompare")
                        .HasColumnType("numeric")
                        .HasColumnName("available_limit_compare");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<decimal?>("BalanceCompare")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_compare");

                    b.Property<string>("CategorySummary")
                        .HasColumnType("text")
                        .HasColumnName("category_summary");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer")
                        .HasColumnName("category_type");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Deleted")
                        .HasColumnType("text")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<string>("ImportFrom")
                        .HasColumnType("text")
                        .HasColumnName("import_from");

                    b.Property<decimal?>("IncreaseCreditLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("increase_credit_limit");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal>("RevenueAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("revenue_amount");

                    b.Property<decimal>("SpentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("spent_amount");

                    b.Property<bool>("SyncMisa")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_misa");

                    b.Property<bool>("SyncSms")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_sms");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("text")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("UsedPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("used_percent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("Vn")
                        .HasColumnType("boolean")
                        .HasColumnName("vn");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_transactions_account_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_transactions_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("CoreFinance.Domain.Transaction", b =>
                {
                    b.HasOne("CoreFinance.Domain.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreFinance.Domain.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
