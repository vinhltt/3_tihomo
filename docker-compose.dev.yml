# TiHoMo Development Environment Docker Compose
# Khởi tạo tất cả tài nguyên cần thiết cho development và debugging

version: '3.8'

services:
  # ================================
  # DATABASES
  # ================================
  
  # PostgreSQL for Identity Service
  identity-postgres:
    image: postgres:16
    container_name: tihomo-identity-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: identity_pass
      POSTGRES_DB: identity
    ports:
      - "5431:5432"
    volumes:
      - identity_pgdata:/var/lib/postgresql/data
      - ./scripts/init-identity-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user -d identity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for CoreFinance Service  
  corefinance-postgres:
    image: postgres:16
    container_name: tihomo-corefinance-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: corefinance_user
      POSTGRES_PASSWORD: corefinance_pass
      POSTGRES_DB: corefinance
    ports:
      - "5432:5432"
    volumes:
      - corefinance_pgdata:/var/lib/postgresql/data
      - ./scripts/init-corefinance-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U corefinance_user -d corefinance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for MoneyManagement Service
  moneymanagement-postgres:
    image: postgres:16
    container_name: tihomo-moneymanagement-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: money_user
      POSTGRES_PASSWORD: money_pass
      POSTGRES_DB: db_money
    ports:
      - "5435:5432"
    volumes:
      - moneymanagement_pgdata:/var/lib/postgresql/data
      - ./scripts/init-moneymanagement-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U money_user -d db_money"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for PlanningInvestment Service
  planninginvestment-postgres:
    image: postgres:16
    container_name: tihomo-planninginvestment-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: planning_user
      POSTGRES_PASSWORD: planning_pass
      POSTGRES_DB: db_planning
    ports:
      - "5436:5432"
    volumes:
      - planninginvestment_pgdata:/var/lib/postgresql/data
      - ./scripts/init-planninginvestment-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U planning_user -d db_planning"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Reporting Service
  reporting-postgres:
    image: postgres:16
    container_name: tihomo-reporting-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: reporting_user
      POSTGRES_PASSWORD: reporting_pass
      POSTGRES_DB: db_reporting
    ports:
      - "5437:5432"
    volumes:
      - reporting_pgdata:/var/lib/postgresql/data
      - ./scripts/init-reporting-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reporting_user -d db_reporting"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: tihomo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # MESSAGE QUEUE & EVENT STREAMING
  # ================================

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: tihomo-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: tihomo
      RABBITMQ_DEFAULT_PASS: tihomo123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - tihomo-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tihomo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Dashboards and Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tihomo-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tihomo-network
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: tihomo-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tihomo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # DEVELOPMENT TOOLS
  # ================================

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tihomo-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tihomo.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - tihomo-network
    depends_on:
      - identity-postgres
      - corefinance-postgres
      - moneymanagement-postgres
      - planninginvestment-postgres
      - reporting-postgres

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tihomo-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - tihomo-network

  # ================================
  # REVERSE PROXY & LOAD BALANCER
  # ================================

  # Nginx for Development Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tihomo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/ssl:/etc/nginx/ssl
    networks:
      - tihomo-network
    depends_on:
      - grafana
      - rabbitmq

# ================================
# NETWORKS
# ================================
networks:
  tihomo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# VOLUMES
# ================================
volumes:
  # Database volumes
  identity_pgdata:
    driver: local
  corefinance_pgdata:
    driver: local
  moneymanagement_pgdata:
    driver: local
  planninginvestment_pgdata:
    driver: local
  reporting_pgdata:
    driver: local
  
  # Cache and message queue volumes
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  
  # Development tools volumes
  pgadmin_data:
    driver: local
