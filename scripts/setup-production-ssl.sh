#!/bin/bash

# TiHoMo Production SSL Setup Script
# Sets up Let's Encrypt SSL certificates for production deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
DOMAINS=(
    "api.tihomo.com"
    "app.tihomo.com"
)
EMAIL="admin@tihomo.com"
STAGING=${STAGING:-false}

echo -e "${GREEN}🚀 TiHoMo Production SSL Setup${NC}"
echo "=================================================="

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo -e "${RED}❌ This script should not be run as root${NC}" 
   exit 1
fi

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}❌ Docker is not running. Please start Docker first.${NC}"
    exit 1
fi

# Create necessary directories
echo -e "${YELLOW}📁 Creating SSL directories...${NC}"
mkdir -p config/ssl/{certs,private,letsencrypt,www}

# Create staging/production flag
if [ "$STAGING" = "true" ]; then
    CERTBOT_ARGS="--staging"
    echo -e "${YELLOW}⚠️  Using Let's Encrypt STAGING environment${NC}"
else
    CERTBOT_ARGS=""
    echo -e "${GREEN}🔒 Using Let's Encrypt PRODUCTION environment${NC}"
fi

# Function to obtain certificate for a domain
obtain_certificate() {
    local domain=$1
    echo -e "${YELLOW}🔐 Obtaining certificate for ${domain}...${NC}"
    
    docker run --rm \
        -v "$(pwd)/config/ssl/letsencrypt:/etc/letsencrypt" \
        -v "$(pwd)/config/ssl/www:/var/www/certbot" \
        -p 80:80 \
        certbot/certbot \
        certonly \
        --standalone \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        $CERTBOT_ARGS \
        -d $domain
}

# Function to setup domain certificates
setup_certificates() {
    echo -e "${YELLOW}🔐 Setting up SSL certificates...${NC}"
    
    for domain in "${DOMAINS[@]}"; do
        if [ ! -f "config/ssl/letsencrypt/live/$domain/fullchain.pem" ]; then
            obtain_certificate $domain
        else
            echo -e "${GREEN}✅ Certificate for $domain already exists${NC}"
        fi
    done
}

# Function to create production environment file
create_production_env() {
    echo -e "${YELLOW}📝 Creating production environment file...${NC}"
    
    cat > .env.production << EOF
# TiHoMo Production Environment Variables
# Generated by setup-production-ssl.sh

# Database Configuration
IDENTITY_DB_PASSWORD=$(openssl rand -base64 32)
COREFINANCE_DB_PASSWORD=$(openssl rand -base64 32)
MONEYMANAGEMENT_DB_PASSWORD=$(openssl rand -base64 32)
PLANNINGINVESTMENT_DB_PASSWORD=$(openssl rand -base64 32)
REPORTING_DB_PASSWORD=$(openssl rand -base64 32)

# Redis Configuration
REDIS_PASSWORD=$(openssl rand -base64 32)

# RabbitMQ Configuration
RABBITMQ_PASSWORD=$(openssl rand -base64 32)

# JWT Configuration
JWT_SECRET_KEY=$(openssl rand -base64 64)

# API Domains
API_DOMAIN=api.tihomo.com
FRONTEND_DOMAIN=app.tihomo.com

# SSL Configuration
SSL_EMAIL=$EMAIL
CERTBOT_STAGING=$STAGING
EOF

    echo -e "${GREEN}✅ Production environment file created: .env.production${NC}"
    echo -e "${YELLOW}⚠️  Please review and update .env.production with your specific values${NC}"
}

# Function to setup certificate renewal
setup_certificate_renewal() {
    echo -e "${YELLOW}🔄 Setting up certificate renewal...${NC}"
    
    # Create renewal script
    cat > scripts/renew-certificates.sh << 'EOF'
#!/bin/bash
# Certificate renewal script for TiHoMo

echo "🔄 Renewing SSL certificates..."

# Renew certificates
docker run --rm \
    -v "$(pwd)/config/ssl/letsencrypt:/etc/letsencrypt" \
    -v "$(pwd)/config/ssl/www:/var/www/certbot" \
    certbot/certbot renew

# Reload nginx if certificates were renewed
if [ $? -eq 0 ]; then
    echo "✅ Certificates renewed successfully"
    docker exec tihomo-nginx nginx -s reload
else
    echo "❌ Certificate renewal failed"
fi
EOF

    chmod +x scripts/renew-certificates.sh
    
    echo -e "${GREEN}✅ Certificate renewal script created: scripts/renew-certificates.sh${NC}"
    echo -e "${YELLOW}💡 Add this to crontab for automatic renewal:${NC}"
    echo "0 12 * * * /path/to/tihomo/scripts/renew-certificates.sh"
}

# Function to validate SSL setup
validate_ssl_setup() {
    echo -e "${YELLOW}🔍 Validating SSL setup...${NC}"
    
    for domain in "${DOMAINS[@]}"; do
        if [ -f "config/ssl/letsencrypt/live/$domain/fullchain.pem" ]; then
            echo -e "${GREEN}✅ Certificate exists for $domain${NC}"
            
            # Check certificate expiration
            expiry=$(openssl x509 -enddate -noout -in "config/ssl/letsencrypt/live/$domain/fullchain.pem" | cut -d= -f2)
            echo -e "${GREEN}   Expires: $expiry${NC}"
        else
            echo -e "${RED}❌ Certificate missing for $domain${NC}"
        fi
    done
}

# Main execution
main() {
    echo -e "${YELLOW}🔍 Checking prerequisites...${NC}"
    
    # Check if domains are provided
    if [ ${#DOMAINS[@]} -eq 0 ]; then
        echo -e "${RED}❌ No domains specified. Please configure DOMAINS array.${NC}"
        exit 1
    fi
    
    # Display configuration
    echo -e "${YELLOW}📋 Configuration:${NC}"
    echo "   Email: $EMAIL"
    echo "   Domains: ${DOMAINS[*]}"
    echo "   Staging: $STAGING"
    echo ""
    
    # Confirm before proceeding
    read -p "Continue with SSL setup? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}⚠️  SSL setup cancelled${NC}"
        exit 0
    fi
    
    # Execute setup steps
    setup_certificates
    create_production_env
    setup_certificate_renewal
    validate_ssl_setup
    
    echo ""
    echo -e "${GREEN}🎉 SSL setup completed successfully!${NC}"
    echo ""
    echo -e "${YELLOW}📋 Next steps:${NC}"
    echo "1. Review and update .env.production"
    echo "2. Configure DNS records for your domains"
    echo "3. Deploy with: docker-compose -f up -d"
    echo "4. Add certificate renewal to crontab"
    echo ""
    echo -e "${GREEN}🔗 Your applications will be available at:${NC}"
    for domain in "${DOMAINS[@]}"; do
        echo "   https://$domain"
    done
}

# Script help
if [[ "${1}" == "help" ]] || [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    echo "TiHoMo Production SSL Setup Script"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  help, -h, --help    Show this help message"
    echo ""
    echo "Environment Variables:"
    echo "  STAGING=true        Use Let's Encrypt staging environment (default: false)"
    echo ""
    echo "Examples:"
    echo "  $0                  Setup production SSL certificates"
    echo "  STAGING=true $0     Setup staging SSL certificates for testing"
    exit 0
fi

# Run main function
main "$@" 