# TiHoMo GHCR Production Services Docker Compose
# Chỉ chứa application services - infrastructure được quản lý bởi docker-compose.infras.yml

services:
  # ================================
  # APPLICATION SERVICES
  # ================================

  # Nuxt Frontend Application - GHCR Image with Local Build Fallback
  frontend-nuxt:
    image: ghcr.io/vinhltt/3_tihomo/frontend-nuxt:${FRONTEND_IMAGE_TAG:-latest}
    pull_policy: always
    build:
      context: ./src/fe/nuxt
      dockerfile: Dockerfile
      # Remove target since Dockerfile is single-stage
    container_name: tihomo-frontend-nuxt
    restart: unless-stopped
    environment:
      # Core Nuxt Configuration - Production optimized
      - NODE_ENV=production
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
      - NUXT_DEV_SSR=false
      
      # API Configuration
      - API_BASE_URL=http://ocelot-gateway:8080
      - IDENTITY_SERVICE_URL=http://identity-api:8080
      - COREFINANCE_SERVICE_URL=http://corefinance-api:8080
      - EXCEL_SERVICE_URL=http://excel-api:8080
      
      # Authentication & Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - NUXT_PUBLIC_API_BASE=${PUBLIC_API_BASE_URL:-http://ocelot-gateway:8080}
      - NUXT_PUBLIC_APP_BASE=${FRONTEND_BASE_URL}
      - NUXT_PUBLIC_GOOGLE_CLIENT_ID=${APP_PUBLIC_GOOGLE_CLIENT_ID}
      - NUXT_PUBLIC_FACEBOOK_APP_ID=${NUXT_PUBLIC_FACEBOOK_APP_ID}
      - OAUTH_REDIRECT_URI=${FRONTEND_BASE_URL}/auth/callback
      
      # Production settings
      - NUXT_DEBUG=false
      - NUXT_DEV_TOOLS=false
      - NUXT_TELEMETRY_DISABLED=1
      
      # Logging Configuration - Production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Feature Toggles
      - ENABLE_PWA=${ENABLE_PWA:-false}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-true}
      
      # Performance
      - NITRO_PRESET=node-server
      - NITRO_PORT=3000
    # ports:
    #   - "${FRONTEND_PORT:-3500}:3000"  # No exposed ports in production
    volumes:
      # Only mount persistent data directories (no source code)
      - ./uploads:/app/uploads
      - ./logs/frontend:/app/logs
    networks:
      - tihomo-network
    depends_on:
      - ocelot-gateway
      - identity-api
      - corefinance-api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 15s
      start_period: 120s  # Faster startup for pre-built images
      retries: 10

  # Ocelot API Gateway
  ocelot-gateway:
    build:
      context: ./src/be/Ocelot.Gateway
      dockerfile: Dockerfile
    container_name: tihomo-ocelot-gateway
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - IsDocker=true
      - ConnectionStrings__Redis=redis:6379
      - Redis__Password=${REDIS_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE_OCELOT_GATEWAY}
      - JwtSettings__AccessTokenExpirationMinutes=${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:-60}
      - JwtSettings__RefreshTokenExpirationDays=${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:-30}
      - Logging__LogLevel__Default=${API_LOG_LEVEL:-Information}
      # OtelSettings are now configured in appsettings.json
      - OtelSettings__ExporterOtlpEndpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://tempo:4317}
      - CorsSettings__AllowedOrigins__0=${CORS_ALLOWED_ORIGINS_0:-*}
      - CorsSettings__AllowedOrigins__1=${CORS_ALLOWED_ORIGINS_1:-}
      - CorsSettings__AllowedOrigins__2=${CORS_ALLOWED_ORIGINS_2:-}
      - CorsSettings__AllowedOrigins__3=${CORS_ALLOWED_ORIGINS_3:-}
      - CorsSettings__AllowedMethods__0=GET
      - CorsSettings__AllowedMethods__1=POST
      - CorsSettings__AllowedMethods__2=PUT
      - CorsSettings__AllowedMethods__3=DELETE
      - CorsSettings__AllowedMethods__4=OPTIONS
      - CorsSettings__AllowedHeaders__0=*
      - InternalServiceSettings__IdentityService=http://identity-api:8080
      - InternalServiceSettings__CoreFinanceService=http://corefinance-api:8080
    # ports:
    #   - "${GATEWAY_PORT}:8080"  # No exposed ports in production
    volumes:
      - ./src/be/Ocelot.Gateway/ocelot.Docker.json:/app/ocelot.json
      - ./logs/ocelot:/app/logs
    networks:
      - tihomo-network
    depends_on:
      - identity-api
      - corefinance-api
      - excel-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 600s
      timeout: 10s
      retries: 3

  # Identity API Service
  identity-api:
    build:
      context: ./src/be
      dockerfile: Identity/Dockerfile
    container_name: tihomo-identity-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - GOOGLE_CLIENT_ID=${APP_PUBLIC_GOOGLE_CLIENT_ID}
      - GoogleAuth__ClientId=${APP_PUBLIC_GOOGLE_CLIENT_ID}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FacebookAuth__AppId=${FACEBOOK_APP_ID}
      - FacebookAuth__AppSecret=${FACEBOOK_APP_SECRET}
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE_IDENTITY_API}
      - JWT__AccessTokenExpirationMinutes=${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:-60}
      - JWT__RefreshTokenExpirationDays=${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:-30}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=identity;Username=identity_user;Password=identity_pass123
      - Redis__ConnectionString=redis:6379
      - Redis__Password=${REDIS_PASSWORD}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=tihomo
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Logging__LogLevel__Default=${API_LOG_LEVEL:-Information}
      # OtelSettings are now configured in appsettings.json
      - OtelSettings__ExporterOtlpEndpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://tempo:4317}
    volumes:
      - ./logs/identity:/app/logs
    networks:
      - tihomo-network
    # depends_on: 
      # Dependencies on infrastructure services are handled externally
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CoreFinance API Service
  corefinance-api:
    build:
      context: ./src/be
      dockerfile: CoreFinance/Dockerfile
    container_name: tihomo-corefinance-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__CoreFinanceDb=Host=postgres;Port=5432;Database=corefinance;Username=corefinance_user;Password=corefinance_pass123
      - ConnectionStrings__Redis=redis:6379
      - Redis__Password=${REDIS_PASSWORD}
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE_COREFINANCE_API}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=tihomo
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - IdentityService__BaseUrl=http://identity-api:8080
      - Logging__LogLevel__Default=${API_LOG_LEVEL:-Information}
      # OtelSettings are now configured in appsettings.json
      - OtelSettings__ExporterOtlpEndpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://tempo:4317}
      # CORS Configuration with multiple origins support
      - CorsOptions__PolicyName=${CORS_POLICY_NAME:-DefaultCorsPolicy}
      - CorsOptions__AllowedOrigins__0=${CORS_ALLOWED_ORIGINS_0:-*}
      - CorsOptions__AllowedOrigins__1=${CORS_ALLOWED_ORIGINS_1:-}
      - CorsOptions__AllowedOrigins__2=${CORS_ALLOWED_ORIGINS_2:-}
      - CorsOptions__AllowedOrigins__3=${CORS_ALLOWED_ORIGINS_3:-}
      - CorsOptions__AllowedMethods__0=GET
      - CorsOptions__AllowedMethods__1=POST
      - CorsOptions__AllowedMethods__2=PUT
      - CorsOptions__AllowedMethods__3=DELETE
      - CorsOptions__AllowedMethods__4=OPTIONS
      - CorsOptions__AllowedHeaders__0=*
      - CorsOptions__ExposedHeaders__0=${CORS_EXPOSED_HEADERS:-Token-Expired}
      - CorsOptions__PreflightMaxAgeInMinutes=${CORS_PREFLIGHT_MAX_AGE:-10}
    volumes:
      - ./logs/corefinance:/app/logs
    networks:
      - tihomo-network
    depends_on:
      - identity-api
      # Infrastructure dependencies are handled externally
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Excel API Service
  excel-api:
    build:
      context: ./src/be
      dockerfile: ExcelApi/Dockerfile
    container_name: tihomo-excel-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=tihomo
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Redis__ConnectionString=redis:6379
      - Redis__Password=${REDIS_PASSWORD}
      - UploadPath=/app/uploads
      - Logging__LogLevel__Default=${API_LOG_LEVEL:-Information}
      # OtelSettings are now configured in appsettings.json
      - OtelSettings__ExporterOtlpEndpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://tempo:4317}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/excel:/app/logs
    networks:
      - tihomo-network
    # depends_on:
      # Infrastructure dependencies are handled externally
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# NETWORKS
# ================================
networks:
  tihomo-network:
    external: true  # Sử dụng network từ docker-compose.infras.yml

# ================================
# VOLUMES
# ================================
volumes:
  # Application-specific volumes only
  # Infrastructure volumes are managed by docker-compose.infras.yml
