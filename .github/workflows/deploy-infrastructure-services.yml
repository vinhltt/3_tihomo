name: Deploy Infrastructure Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      services:
        description: 'Specific services to deploy (comma-separated: postgres,redis,rabbitmq,prometheus,grafana,loki,tempo) or "all"'
        required: false
        default: 'all'
        type: string
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean
      force_recreate_env:
        description: 'Force recreate .env file'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: string
      services:
        description: 'Specific services to deploy (comma-separated: postgres,redis,rabbitmq,prometheus,grafana,loki,tempo) or "all"'
        required: false
        default: 'all'
        type: string
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean
      force_recreate_env:
        description: 'Force recreate .env file'
        required: false
        default: false
        type: boolean

concurrency:
  group: tihomo-infrastructure-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # Deploy infrastructure services
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}
    timeout-minutes: 25
    outputs:
      deployment-status: ${{ steps.deploy.outputs.status }}
      
    steps:
      - name: "[1/10] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/10] Setup environment variables"
        run: |
          CLEAN_ENV=$(echo "${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=tihomo_${CLEAN_ENV}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${CLEAN_ENV}" >> $GITHUB_ENV
          
          # Parse services to deploy
          SERVICES="${{ inputs.services || 'all' }}"
          if [ "$SERVICES" = "all" ]; then
            SERVICES="postgres,redis,rabbitmq,prometheus,grafana,loki,tempo,pgadmin,mailhog,nginx"
          fi
          echo "SERVICES_TO_DEPLOY=${SERVICES}" >> $GITHUB_ENV
          
          echo "[INFO] Deploy directory: ${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}"
          echo "[INFO] Project name: tihomo_${CLEAN_ENV}"
          echo "[INFO] Services: ${SERVICES}"

      - name: "[3/10] Setup SSH and Cloudflared"
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"

      - name: "[4/10] Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: "[5/10] Sync deployment files to TrueNAS"
        run: |
          echo "[SYNC] Syncing deployment files to TrueNAS..."
          
          # Create remote directory
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel "mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}"
          
          # Copy necessary files
          scp -F "$HOME/.ssh/config" docker-compose.infras.yml truenas-cf-tunnel:${{ env.TRUENAS_DEPLOY_DIR }}/
          
          # Copy config directory if exists
          if [ -d "config" ]; then
            scp -F "$HOME/.ssh/config" -r config truenas-cf-tunnel:${{ env.TRUENAS_DEPLOY_DIR }}/
          fi
          
          # Copy scripts directory if exists  
          if [ -d "scripts" ]; then
            scp -F "$HOME/.ssh/config" -r scripts truenas-cf-tunnel:${{ env.TRUENAS_DEPLOY_DIR }}/
          fi
          
          # Copy Makefile if exists
          if [ -f "Makefile" ]; then
            scp -F "$HOME/.ssh/config" Makefile truenas-cf-tunnel:${{ env.TRUENAS_DEPLOY_DIR }}/
          fi
          
          echo "[SUCCESS] Files synced to TrueNAS"

      - name: "[6/10] Create and validate environment file"
        run: |
          cat > /tmp/env_vars.sh << 'SCRIPT_EOF'
          export COMPOSE_PROJECT_NAME="${{ env.COMPOSE_PROJECT_NAME }}"
          export ENVIRONMENT="${{ env.ENVIRONMENT }}"
          export POSTGRES_SUPER_PASSWORD="${{ secrets.POSTGRES_SUPER_PASSWORD }}"
          export IDENTITY_DB_PASSWORD="${{ secrets.IDENTITY_DB_PASSWORD || secrets.POSTGRES_SUPER_PASSWORD }}"
          export COREFINANCE_DB_PASSWORD="${{ secrets.COREFINANCE_DB_PASSWORD || secrets.POSTGRES_SUPER_PASSWORD }}"
          export MONEYMANAGEMENT_DB_PASSWORD="${{ secrets.MONEYMANAGEMENT_DB_PASSWORD || secrets.POSTGRES_SUPER_PASSWORD }}"
          export PLANNINGINVESTMENT_DB_PASSWORD="${{ secrets.PLANNINGINVESTMENT_DB_PASSWORD || secrets.POSTGRES_SUPER_PASSWORD }}"
          export REPORTING_DB_PASSWORD="${{ secrets.REPORTING_DB_PASSWORD || secrets.POSTGRES_SUPER_PASSWORD }}"
          export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          export RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}"
          export GRAFANA_ADMIN_PASSWORD="${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          export PGADMIN_PASSWORD="${{ secrets.PGADMIN_PASSWORD }}"
          SCRIPT_EOF
          
          scp -F "$HOME/.ssh/config" /tmp/env_vars.sh truenas-cf-tunnel:${{ env.TRUENAS_DEPLOY_DIR }}/
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            # Create deployment directory if it doesn't exist
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Load environment variables
            source ./env_vars.sh
            
            echo "[INFO] Working in directory: $(pwd)"
            
            # Handle .env file creation/recreation
            if [ "${{ inputs.force_recreate_env }}" = "true" ]; then
              echo "[FORCE] Force recreate .env requested"
              if [ -f .env ]; then
                cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
                echo "[BACKUP] Created backup before force recreate"
              fi
              rm -f .env
            elif [ -f .env ]; then
              echo "[CHECK] .env file exists, validating required variables..."
              required_vars="COMPOSE_PROJECT_NAME POSTGRES_SUPER_PASSWORD REDIS_PASSWORD RABBITMQ_PASSWORD GRAFANA_ADMIN_PASSWORD"
              missing_vars=""
              
              for var in $required_vars; do
                if ! grep -q "^${var}=" .env; then
                  missing_vars="$missing_vars $var"
                fi
              done
              
              if [ -z "$missing_vars" ]; then
                echo "[OK] Existing .env file is valid"
                exit 0
              else
                echo "[WARNING] Missing variables: $missing_vars, recreating .env"
                cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
                rm -f .env
              fi
            fi
            
            echo "[CREATE] Creating comprehensive .env file..."
            
            # Create .env using echo statements to avoid YAML/HEREDOC conflicts
            echo "# TiHoMo Infrastructure Environment Configuration" > .env
            echo "# Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .env
            echo "" >> .env
            echo "# Project Configuration" >> .env
            echo "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}" >> .env
            echo "" >> .env
            echo "# Core Infrastructure Ports" >> .env
            echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT || '5432' }}" >> .env
            echo "REDIS_PORT=${{ vars.REDIS_PORT || '6379' }}" >> .env
            echo "RABBITMQ_PORT=${{ vars.RABBITMQ_PORT || '5672' }}" >> .env
            echo "RABBITMQ_MANAGEMENT_PORT=${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}" >> .env

            echo "" >> .env
            echo "# Monitoring Ports" >> .env
            echo "PROMETHEUS_PORT=${{ vars.PROMETHEUS_PORT || '9090' }}" >> .env
            echo "GRAFANA_PORT=${{ vars.GRAFANA_PORT || '3000' }}" >> .env
            echo "LOKI_PORT=${{ vars.LOKI_PORT || '3100' }}" >> .env
            echo "" >> .env
            echo "# Development Tools Ports" >> .env
            echo "PGADMIN_PORT=${{ vars.PGADMIN_PORT || '8080' }}" >> .env
            echo "MAILHOG_SMTP_PORT=${{ vars.MAILHOG_SMTP_PORT || '1025' }}" >> .env
            echo "MAILHOG_UI_PORT=${{ vars.MAILHOG_UI_PORT || '8025' }}" >> .env
            echo "NGINX_HTTP_PORT=${{ vars.NGINX_HTTP_PORT || '80' }}" >> .env
            echo "NGINX_HTTPS_PORT=${{ vars.NGINX_HTTPS_PORT || '443' }}" >> .env
            echo "" >> .env
            echo "# Database Configuration" >> .env
            echo "POSTGRES_SUPER_USER=${{ vars.POSTGRES_SUPER_USER || 'postgres' }}" >> .env
            echo "POSTGRES_SUPER_PASSWORD='${POSTGRES_SUPER_PASSWORD}'" >> .env
            echo "IDENTITY_DB_PASSWORD='${IDENTITY_DB_PASSWORD}'" >> .env
            echo "COREFINANCE_DB_PASSWORD='${COREFINANCE_DB_PASSWORD}'" >> .env
            echo "MONEYMANAGEMENT_DB_PASSWORD='${MONEYMANAGEMENT_DB_PASSWORD}'" >> .env
            echo "PLANNINGINVESTMENT_DB_PASSWORD='${PLANNINGINVESTMENT_DB_PASSWORD}'" >> .env
            echo "REPORTING_DB_PASSWORD='${REPORTING_DB_PASSWORD}'" >> .env
            echo "" >> .env
            echo "# Redis Configuration" >> .env
            echo "REDIS_PASSWORD='${REDIS_PASSWORD}'" >> .env
            echo "REDIS_PERSISTENCE_CONFIG=$([ "${ENVIRONMENT}" = "production" ] && echo '--save 900 1 --save 300 10 --save 60 10000' || echo '')" >> .env
            echo "" >> .env
            echo "# RabbitMQ Configuration" >> .env
            echo "RABBITMQ_PASSWORD='${RABBITMQ_PASSWORD}'" >> .env
            echo "" >> .env
            echo "# Monitoring Configuration" >> .env
            echo "PROMETHEUS_RETENTION=$([ "${ENVIRONMENT}" = "production" ] && echo '30d' || echo '200h')" >> .env
            echo "GRAFANA_ADMIN_PASSWORD='${GRAFANA_ADMIN_PASSWORD}'" >> .env
            echo "GRAFANA_ANALYTICS_ENABLED=$([ "${ENVIRONMENT}" = "production" ] && echo 'false' || echo 'true')" >> .env
            echo "GRAFANA_CHECK_UPDATES=$([ "${ENVIRONMENT}" = "production" ] && echo 'false' || echo 'true')" >> .env
            echo "" >> .env
            echo "# Development Tools Configuration" >> .env
            echo "PGADMIN_PASSWORD='${PGADMIN_PASSWORD}'" >> .env
            echo "ENABLE_DEV_TOOLS=$([ "${ENVIRONMENT}" = "production" ] && echo 'none' || echo 'development')" >> .env
            echo "" >> .env
            echo "# OpenTelemetry Configuration" >> .env
            echo "OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317" >> .env
            echo "" >> .env
            echo "# Deployment Information" >> .env
            echo "DEPLOY_BRANCH=${{ github.ref_name }}" >> .env
            echo "DEPLOY_COMMIT=${{ github.sha }}" >> .env
            echo "DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .env
            echo "ENVIRONMENT=${ENVIRONMENT}" >> .env
            
            echo "[SUCCESS] .env file created successfully"
            echo "[VALIDATION] Checking critical variables..."
            
            critical_vars=("POSTGRES_SUPER_PASSWORD" "REDIS_PASSWORD" "RABBITMQ_PASSWORD" "GRAFANA_ADMIN_PASSWORD")
            missing_vars=""
            
            for var in "${critical_vars[@]}"; do
              if ! grep -q "^${var}=" .env || [ "$(grep "^${var}=" .env | cut -d'=' -f2 | tr -d "'")" = "" ]; then
                missing_vars="$missing_vars $var"
              fi
            done
            
            if [ -n "$missing_vars" ]; then
              echo "[ERROR] Missing critical variables:$missing_vars"
              exit 1
            else
              echo "[OK] All critical variables are set"
            fi
          EOF

      - name: "[7/10] Deploy infrastructure services"
        id: deploy
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Check Docker access and set command prefix
            if docker ps >/dev/null 2>&1; then
              DOCKER_CMD="docker"
            else
              DOCKER_CMD="sudo docker"
            fi
            
            echo "[INFO] Deploying infrastructure services..."
            echo "[INFO] Environment: ${{ env.ENVIRONMENT }}"
            echo "[INFO] Services: ${{ env.SERVICES_TO_DEPLOY }}"
            
            # Parse services to deploy
            SERVICES_LIST="${{ env.SERVICES_TO_DEPLOY }}"
            DEPLOYED_SERVICES=""
            FAILED_SERVICES=""
            
            # Create network first (remove old one if exists with wrong labels)
            echo "[NETWORK] Ensuring tihomo-network is properly configured..."
            \\${DOCKER_CMD} network inspect tihomo-network >/dev/null 2>&1 && {
              echo "[INFO] Removing existing network to recreate with correct labels..."
              \\${DOCKER_CMD} network rm tihomo-network 2>/dev/null || true
            }
            echo "[NETWORK] Creating tihomo-network..."
            \\${DOCKER_CMD} network create tihomo-network || echo "[INFO] Network already exists"
            
            # Deploy services in order of dependency
            for group in "postgres" "redis rabbitmq" "prometheus loki tempo" "grafana" "pgadmin mailhog nginx"; do
              for service in $group; do
                # Check if service is in the deploy list
                if echo ",$SERVICES_LIST," | grep -q ",$service,"; then
                  echo "[DEPLOY] Deploying $service..."
                  
                  if \\${DOCKER_CMD} compose -f docker-compose.infras.yml config --services | grep -q "^$service\$"; then
                    echo "[DEBUG] Starting $service container..."
                    \\${DOCKER_CMD} compose -f docker-compose.infras.yml up -d --no-deps --force-recreate $service 2>&1 | tee /tmp/${service}_start.log
                    
                    if [ \${PIPESTATUS[0]} -ne 0 ]; then
                      echo "[ERROR] Failed to start $service. Check logs:"
                      cat /tmp/${service}_start.log
                      FAILED_SERVICES="\$FAILED_SERVICES $service"
                      continue
                    fi
                    
                    # Wait for service to be ready
                    echo "[HEALTH] Waiting for $service to be ready..."
                    max_attempts=8
                    attempt=1
                    service_ready=false
                    
                    while [ $attempt -le $max_attempts ]; do
                      if \\${DOCKER_CMD} compose -f docker-compose.infras.yml ps $service | grep -q "Up"; then
                        echo "[RUNNING] $service container is running"
                        
                        # Service-specific health checks
                        case $service in
                          postgres)
                            sleep 15
                            if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
                              service_ready=true
                            fi
                            ;;
                          redis)
                            sleep 5
                            if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T redis redis-cli -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q "PONG"; then
                              service_ready=true
                            fi
                            ;;
                          rabbitmq)
                            sleep 20
                            if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T rabbitmq rabbitmq-diagnostics ping >/dev/null 2>&1; then
                              service_ready=true
                            fi
                            ;;
                          prometheus|grafana|loki|tempo)
                            sleep 10
                            service_ready=true  # Assume ready if container is up
                            ;;
                          *)
                            sleep 5
                            service_ready=true  # Assume ready for other services
                            ;;
                        esac
                        
                        if [ "$service_ready" = true ]; then
                          echo "[SUCCESS] $service health check passed"
                          break
                        else
                          echo "[INFO] $service container running but not ready yet"
                        fi
                      else
                        echo "[WAIT] $service not ready yet (attempt $attempt/$max_attempts)"
                      fi
                      
                      sleep 10
                      attempt=$((attempt + 1))
                    done
                    
                    if [ "$service_ready" = true ]; then
                      DEPLOYED_SERVICES="$DEPLOYED_SERVICES $service"
                    else
                      echo "[WARNING] $service deployment may need more time"
                      echo "[DEBUG] Recent logs for $service:"
                      \\${DOCKER_CMD} compose -f docker-compose.infras.yml logs --tail=15 $service
                      FAILED_SERVICES="$FAILED_SERVICES $service"
                    fi
                  else
                    echo "[ERROR] Service $service not found in compose file"
                    FAILED_SERVICES="$FAILED_SERVICES $service"
                  fi
                fi
              done
              
              # Wait between groups for stability  
              echo "[INFO] Waiting for service group to stabilize..."
              sleep 10
            done
            
            # Deployment summary
            echo ""
            echo "[SUMMARY] Infrastructure Deployment Results:"
            echo "==========================================="
            
            if [ -n "$DEPLOYED_SERVICES" ]; then
              echo "✅ Successfully deployed:"
              for service in $DEPLOYED_SERVICES; do
                echo "   • $service"
              done
            fi
            
            if [ -n "$FAILED_SERVICES" ]; then
              echo "❌ Failed or needs attention:"
              for service in $FAILED_SERVICES; do
                echo "   • $service"
              done
            fi
            
            # Final status check
            echo ""
            echo "[STATUS] Final infrastructure status:"
            \\${DOCKER_CMD} compose -f docker-compose.infras.yml ps
            
            # Export status for next steps
            if [ -z "$FAILED_SERVICES" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "status=partial" >> $GITHUB_OUTPUT
            fi
          EOF

      - name: "[8/10] Infrastructure health check"
        if: always()
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Check Docker access and set command prefix
            if docker ps >/dev/null 2>&1; then
              DOCKER_CMD="docker"
            else
              DOCKER_CMD="sudo docker"
            fi
            
            echo "[HEALTH] Comprehensive infrastructure health check..."
            
            # Check network
            if \\${DOCKER_CMD} network inspect tihomo-network >/dev/null 2>&1; then
              echo "[OK] Network tihomo-network exists"
            else
              echo "[WARNING] Network tihomo-network not found"
            fi
            
            # Check core services
            CORE_SERVICES="postgres redis rabbitmq"
            HEALTHY_SERVICES=""
            UNHEALTHY_SERVICES=""
            
            for service in $CORE_SERVICES; do
              if \\${DOCKER_CMD} compose -f docker-compose.infras.yml ps $service | grep -q "Up"; then
                case $service in
                  postgres)
                    if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
                      HEALTHY_SERVICES="$HEALTHY_SERVICES $service"
                    else
                      UNHEALTHY_SERVICES="$UNHEALTHY_SERVICES $service"
                    fi
                    ;;
                  redis)
                    if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T redis redis-cli ping >/dev/null 2>&1; then
                      HEALTHY_SERVICES="$HEALTHY_SERVICES $service"
                    else
                      UNHEALTHY_SERVICES="$UNHEALTHY_SERVICES $service"
                    fi
                    ;;
                  rabbitmq)
                    if \\${DOCKER_CMD} compose -f docker-compose.infras.yml exec -T rabbitmq rabbitmq-diagnostics ping >/dev/null 2>&1; then
                      HEALTHY_SERVICES="$HEALTHY_SERVICES $service"
                    else
                      UNHEALTHY_SERVICES="$UNHEALTHY_SERVICES $service"
                    fi
                    ;;
                esac
              else
                UNHEALTHY_SERVICES="$UNHEALTHY_SERVICES $service(not-running)"
              fi
            done
            
            echo "[HEALTH] Health check results:"
            if [ -n "$HEALTHY_SERVICES" ]; then
              echo "✅ Healthy services:$HEALTHY_SERVICES"
            fi
            if [ -n "$UNHEALTHY_SERVICES" ]; then
              echo "❌ Unhealthy services:$UNHEALTHY_SERVICES"
            fi
            
            echo "[INFO] Infrastructure deployment completed"
          EOF

      - name: "[9/10] Send notification"
        if: always()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '🏗️ **Infrastructure Deployment SUCCESS**' || '❌ **Infrastructure Deployment FAILED**' }}
            
            🔧 **Infrastructure Info:**
            • **Environment:** `${{ env.ENVIRONMENT }}`
            • **Branch:** `${{ github.ref_name }}`
            • **Services:** `${{ env.SERVICES_TO_DEPLOY }}`
            • **Database:** `${{ vars.POSTGRES_PORT || '5432' }}`
            • **Monitoring:** `${{ vars.GRAFANA_PORT || '3000' }}`
            
            ${{ job.status == 'success' && '⚡ **Infrastructure ready for applications!**' || '🚨 **Check deployment logs for details**' }}