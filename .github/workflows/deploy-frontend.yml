name: Deploy Frontend Service

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild frontend image'
        required: false
        default: false
        type: boolean
      skip_backend_check:
        description: 'Skip backend dependency check'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      force_rebuild:
        required: false
        type: boolean
        default: false
      skip_backend_check:
        required: false
        type: boolean
        default: false

concurrency:
  group: tihomo-frontend-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  check-backend:
    if: ${{ !inputs.skip_backend_check }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 5
    
    steps:
      - name: Setup SSH and check backend
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"
        shell: bash

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Check backend readiness
        run: |
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${{ github.ref_name }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            echo "[INFO] Navigating to deployment directory: \$DEPLOY_DIR"
            cd "\$DEPLOY_DIR" || {
              echo "[ERROR] Cannot navigate to deployment directory: \$DEPLOY_DIR"
              exit 1
            }
            
            echo "[INFO] Current directory: \$(pwd)"
            echo "[INFO] Checking for docker-compose.yml: \$(test -f docker-compose.yml && echo 'EXISTS' || echo 'MISSING')"
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[CHECK] Verifying backend services for frontend..."
            
            REQUIRED_SERVICES=("ocelot-gateway")
            MISSING_SERVICES=()
            
            for service in "\${REQUIRED_SERVICES[@]}"; do
              echo "[DEBUG] Checking service: \$service"
              if ! \$USE_SUDO docker compose ps \$service | grep -q "Up"; then
                echo "[WARNING] Service \$service is not running"
                MISSING_SERVICES+=("\$service")
              else
                echo "[OK] Service \$service is running"
              fi
            done
            
            if [ \${#MISSING_SERVICES[@]} -gt 0 ]; then
              echo "[ERROR] Missing backend services: \${MISSING_SERVICES[*]}"
              echo "[ACTION] Please run backend deployment first"
              echo "[DEBUG] Docker compose services status:"
              \$USE_SUDO docker compose ps --format "table {{.Name}}\\\\t{{.Status}}"
              exit 1
            fi
            
            # Test API connectivity
            if \$USE_SUDO docker compose exec -T ocelot-gateway curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "[OK] Gateway is responsive"
            else
              echo "[WARNING] Gateway health check failed but container is running"
            fi
            
            echo "[OK] Backend services are ready for frontend deployment"
          REMOTE_EOF
        shell: bash

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [check-backend]
    if: always() && (needs.check-backend.result == 'success' || inputs.skip_backend_check)
    environment: ${{ inputs.environment }}
    timeout-minutes: 20
    
    steps:
      - name: "[1/9] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/9] Setup environment"
        run: |
          # Clean project name - remove special characters and ensure lowercase
          CLEAN_ENV=$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=tihomo_${CLEAN_ENV}" >> $GITHUB_ENV
          echo "[INFO] Environment: '${{ inputs.environment }}' → cleaned: '${CLEAN_ENV}'"
        shell: bash

      - name: "[3/9] Setup SSH"
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"
        shell: bash

      - name: "[4/9] Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: "[4.5/9] Prepare deployment directory"
        run: |
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            echo "[PREP] Preparing frontend deployment directory..."
            
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            
            # Create required directories with proper ownership
            mkdir -p "\$DEPLOY_DIR/src/fe/nuxt"
            mkdir -p "\$DEPLOY_DIR/.rsync-partial"
            
            # Set proper permissions and ownership
            chmod 755 "\$DEPLOY_DIR"
            chmod -R 755 "\$DEPLOY_DIR/src" 2>/dev/null || true
            chmod -R 755 "\$DEPLOY_DIR/.rsync-partial" 2>/dev/null || true
            
            # Fix ownership to current user to avoid permission issues
            chown -R \$(whoami):\$(whoami) "\$DEPLOY_DIR" 2>/dev/null || true
            
            # Cleanup any problematic files from previous deployments
            if [ -d "\$DEPLOY_DIR/src/fe" ]; then
              echo "[CLEANUP] Cleaning previous frontend deployment files..."
              
              # Remove any hidden/temp files that might cause permission issues
              find "\$DEPLOY_DIR/src/fe" -name ".*" -type f -delete 2>/dev/null || true
              find "\$DEPLOY_DIR/src/fe" -name "*.tmp" -type f -delete 2>/dev/null || true
              find "\$DEPLOY_DIR/src/fe" -name ".rsync_*" -type f -delete 2>/dev/null || true
              
              # Fix permissions recursively
              find "\$DEPLOY_DIR/src/fe" -type d -exec chmod 755 {} \\; 2>/dev/null || true
              find "\$DEPLOY_DIR/src/fe" -type f -exec chmod 644 {} \\; 2>/dev/null || true
              
              # Fix ownership
              chown -R \$(whoami):\$(whoami) "\$DEPLOY_DIR/src/fe" 2>/dev/null || true
            fi
            
            echo "[OK] Frontend deployment directory prepared with proper permissions"
          REMOTE_EOF
        shell: bash

      - name: "[5/9] Sync frontend files"
        run: |
          echo "[SYNC] Starting frontend files sync to TrueNAS..."
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          # Enhanced rsync for frontend files with better error handling
          rsync -rltvz --safe-links \
            --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            --no-perms --no-owner --no-group \
            --ignore-errors \
            --force \
            --include="src/" \
            --include="src/fe/" \
            --include="src/fe/nuxt/" \
            --include="src/fe/nuxt/**" \
            --include="docker-compose.yml" \
            --include=".env*" \
            --exclude="*" \
            --partial \
            --partial-dir=.rsync-partial \
            --progress \
            --human-readable \
            -e "ssh -F $HOME/.ssh/config -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30" \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"$DEPLOY_DIR/" || {
              RSYNC_EXIT_CODE=$?
              echo "[ERROR] Rsync failed with exit code: $RSYNC_EXIT_CODE"
              
              case $RSYNC_EXIT_CODE in
                1)  echo "[ERROR] Syntax or usage error" ;;
                2)  echo "[ERROR] Protocol incompatibility" ;;
                3)  echo "[ERROR] Errors selecting input/output files, dirs" ;;
                11) echo "[ERROR] Error in file I/O" ;;
                12) echo "[ERROR] Error in rsync protocol data stream" ;;
                13) echo "[ERROR] Errors with program diagnostics" ;;
                23) echo "[WARNING] Partial transfer due to error - some files may not have transferred correctly" ;;
                24) echo "[ERROR] Partial transfer due to vanished source files" ;;
                *)  echo "[ERROR] Unknown rsync error code: $RSYNC_EXIT_CODE" ;;
              esac
              
              # Handle common non-critical errors that shouldn't stop deployment
              if [ $RSYNC_EXIT_CODE -eq 23 ]; then
                echo "[WARNING] Continuing deployment despite rsync warnings (exit code $RSYNC_EXIT_CODE)"
                echo "[INFO] This usually indicates file permission/attribute warnings that don't affect functionality"
              else
                echo "[ERROR] Critical rsync error, stopping deployment"
                exit $RSYNC_EXIT_CODE
              fi
            }
          
          echo "[OK] Frontend files synced successfully"
          
          # Verify the synced files structure
          echo "[DEBUG] Verifying synced frontend files structure..."
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            cd \$DEPLOY_DIR
            echo "[DEBUG] Current directory: \$(pwd)"
            echo "[DEBUG] Directory structure after rsync:"
            ls -la
            echo "[DEBUG] Frontend directory structure:"
            if [ -d "src/fe/nuxt" ]; then
              ls -la src/fe/nuxt/
              echo "[DEBUG] Dockerfile exists: \$(test -f src/fe/nuxt/Dockerfile && echo 'YES' || echo 'NO')"
              echo "[DEBUG] package.json exists: \$(test -f src/fe/nuxt/package.json && echo 'YES' || echo 'NO')"
              echo "[DEBUG] nuxt.config.ts exists: \$(test -f src/fe/nuxt/nuxt.config.ts && echo 'YES' || echo 'NO')"
            else
              echo "[ERROR] src/fe/nuxt directory not found!"
              echo "[DEBUG] Available directories:"
              find . -type d -name "*nuxt*" 2>/dev/null || echo "No nuxt directories found"
            fi
            echo "[DEBUG] docker-compose.yml exists: \$(test -f docker-compose.yml && echo 'YES' || echo 'NO')"
          REMOTE_EOF
        shell: bash

      - name: "[6/9] Create comprehensive environment file for frontend"
        run: |
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            
            echo "[INFO] Navigating to deployment directory: \$DEPLOY_DIR"
            mkdir -p "\$DEPLOY_DIR"
            cd "\$DEPLOY_DIR" || {
              echo "[ERROR] Cannot navigate to deployment directory: \$DEPLOY_DIR"
              echo "[DEBUG] Current working directory: \$(pwd)"
              echo "[DEBUG] Directory listing:"
              ls -la
              exit 1
            }
            
            echo "[INFO] Working in directory: \$(pwd)"
            
            # Ensure directory has proper permissions for writing files
            chmod 755 "\$(pwd)"
            
            # Remove corrupted .env file if it exists
            if [ -f .env ]; then
              echo "[CLEANUP] Removing corrupted .env file..."
              rm -f .env
            fi
            
            echo "[CREATE] Creating comprehensive .env file for frontend deployment..."
            
            # Create .env file using cat heredoc to avoid echo command issues
            rm -f .env

            echo "# Create static content first" >> .env
            echo "# ================================" >> .env
            echo "# CORS Configuration" >> .env
            echo "# ================================" >> .env
            echo "CORS_POLICY_NAME=DefaultCorsPolicy" >> .env
            echo "CORS_ALLOWED_ORIGINS=*" >> .env
            echo "CORS_ALLOWED_METHODS=*" >> .env
            echo "CORS_ALLOWED_HEADERS=*" >> .env
            echo "CORS_EXPOSED_HEADERS=Token-Expired" >> .env
            echo "CORS_PREFLIGHT_MAX_AGE=10" >> .env
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Environment Configuration" >> .env
            echo "# ================================" >> .env
            echo "ASPNETCORE_ENVIRONMENT=Docker" >> .env

            echo "# Add variables that need GitHub Actions substitution" >> .env
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Database Configuration" >> .env
            echo "# ================================" >> .env
            echo "IDENTITY_DB_USERNAME=${{ vars.IDENTITY_DB_USERNAME || 'identity_user' }}" >> .env
            echo "IDENTITY_DB_PASSWORD=${{ secrets.IDENTITY_DB_PASSWORD }}" >> .env  
            echo "IDENTITY_DB_PORT=${{ vars.IDENTITY_DB_PORT || '5431' }}" >> .env
            echo "COREFINANCE_DB_USERNAME=${{ vars.COREFINANCE_DB_USERNAME || 'corefinance_user' }}" >> .env
            echo "COREFINANCE_DB_PASSWORD=${{ secrets.COREFINANCE_DB_PASSWORD }}" >> .env
            echo "COREFINANCE_DB_PORT=${{ vars.COREFINANCE_DB_PORT || '5432' }}" >> .env
            echo "MONEYMANAGEMENT_DB_USERNAME=${{ vars.MONEYMANAGEMENT_DB_USERNAME || 'money_user' }}" >> .env
            echo "MONEYMANAGEMENT_DB_PASSWORD=${{ secrets.MONEYMANAGEMENT_DB_PASSWORD }}" >> .env
            echo "MONEYMANAGEMENT_DB_PORT=${{ vars.MONEYMANAGEMENT_DB_PORT || '5433' }}" >> .env
            echo "PLANNINGINVESTMENT_DB_USERNAME=${{ vars.PLANNINGINVESTMENT_DB_USERNAME || 'planning_user' }}" >> .env
            echo "PLANNINGINVESTMENT_DB_PASSWORD=${{ secrets.PLANNINGINVESTMENT_DB_PASSWORD }}" >> .env
            echo "PLANNINGINVESTMENT_DB_PORT=${{ vars.PLANNINGINVESTMENT_DB_PORT || '5434' }}" >> .env
            echo "REPORTING_DB_USERNAME=${{ vars.REPORTING_DB_USERNAME || 'reporting_user' }}" >> .env
            echo "REPORTING_DB_PASSWORD=${{ secrets.REPORTING_DB_PASSWORD }}" >> .env
            echo "REPORTING_DB_PORT=${{ vars.REPORTING_DB_PORT || '5435' }}" >> .env

            # Add authentication configuration  
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Authentication Configuration" >> .env
            echo "# ================================" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "JWT_ISSUER=${{ vars.JWT_ISSUER || 'TiHoMo' }}" >> .env
            echo "JWT_AUDIENCE_IDENTITY_API=${{ vars.JWT_AUDIENCE_IDENTITY_API || 'TiHoMo.Identity.Api' }}" >> .env
            echo "JWT_AUDIENCE_COREFINANCE_API=${{ vars.JWT_AUDIENCE_COREFINANCE_API || 'TiHoMo.CoreFinance.Api' }}" >> .env
            echo "JWT_AUDIENCE_EXCEL_API=${{ vars.JWT_AUDIENCE_EXCEL_API || 'TiHoMo.Excel.Api' }}" >> .env
            echo "JWT_AUDIENCE_FRONTEND=${{ vars.JWT_AUDIENCE_FRONTEND || 'TiHoMo.Frontend' }}" >> .env
            echo "JWT_AUDIENCE_OCELOT_GATEWAY=${{ vars.JWT_AUDIENCE_OCELOT_GATEWAY || 'TiHoMo.Gateway' }}" >> .env

            # Add external services configuration
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# External Services Configuration" >> .env
            echo "# ================================" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "REDIS_PORT=${{ vars.REDIS_PORT || '6379' }}" >> .env
            echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
            echo "RABBITMQ_PORT=${{ vars.RABBITMQ_PORT || '5672' }}" >> .env
            echo "RABBITMQ_MANAGEMENT_PORT=${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}" >> .env
            echo "PROMETHEUS_PORT=${{ vars.PROMETHEUS_PORT || '9090' }}" >> .env
            echo "GRAFANA_PORT=${{ vars.GRAFANA_PORT || '3000' }}" >> .env
            echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env
            echo "MAILHOG_SMTP_PORT=${{ vars.MAILHOG_SMTP_PORT || '1025' }}" >> .env
            echo "MAILHOG_UI_PORT=${{ vars.MAILHOG_UI_PORT || '8025' }}" >> .env
            echo "GATEWAY_PORT=${{ vars.GATEWAY_PORT || '8080' }}" >> .env

            # Add API ports configuration
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# API Ports Configuration" >> .env
            echo "# ================================" >> .env
            echo "API_GATEWAY_PORT=${{ vars.API_GATEWAY_PORT || '8080' }}" >> .env
            echo "IDENTITY_API_PORT=${{ vars.IDENTITY_API_PORT || '5217' }}" >> .env
            echo "COREFINANCE_API_PORT=${{ vars.COREFINANCE_API_PORT || '7293' }}" >> .env
            echo "EXCEL_API_PORT=${{ vars.EXCEL_API_PORT || '5219' }}" >> .env
            echo "FRONTEND_PORT=${{ vars.FRONTEND_PORT || '3500' }}" >> .env

            # Add Docker and frontend configuration
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Docker Build Configuration" >> .env
            echo "# ================================" >> .env
            echo "NUXT_BUILD_TARGET=production" >> .env
            echo "NODE_ENV=production" >> .env
            echo "DOCKER_USER=1001:1001" >> .env
            echo "NUXT_DEV_SSR=false" >> .env
            echo "NUXT_DEV_TOOLS=false" >> .env
            echo "NUXT_DEBUG=false" >> .env
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Frontend Configuration" >> .env
            echo "# ================================" >> .env
            echo "FRONTEND_BASE_URL=${{ vars.FRONTEND_BASE_URL || 'http://localhost:3500' }}" >> .env
            echo "APP_PUBLIC_GOOGLE_CLIENT_ID=${{ vars.APP_PUBLIC_GOOGLE_CLIENT_ID }}" >> .env

            # Add infrastructure configuration
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Infrastructure Configuration" >> .env
            echo "# ================================" >> .env
            echo "PGADMIN_PASSWORD=${{ secrets.PGADMIN_PASSWORD }}" >> .env
            echo "PGADMIN_PORT=${{ vars.PGADMIN_PORT || '8080' }}" >> .env
            echo "LOKI_PORT=${{ vars.LOKI_PORT || '3100' }}" >> .env
            echo "NGINX_HTTP_PORT=${{ vars.NGINX_HTTP_PORT || '80' }}" >> .env
            echo "NGINX_HTTPS_PORT=${{ vars.NGINX_HTTPS_PORT || '443' }}" >> .env

            # Add network and project configuration
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Network Configuration" >> .env
            echo "# ================================" >> .env
            echo "DOCKER_NETWORK_SUBNET=${{ vars.DOCKER_NETWORK_SUBNET || '172.20.0.0/16' }}" >> .env
            echo "" >> .env
            echo "# ================================" >> .env
            echo "# Docker Compose Project Name" >> .env
            echo "# ================================" >> .env
            echo "COMPOSE_PROJECT_NAME=${{ env.COMPOSE_PROJECT_NAME }}" >> .env
            
            echo "[OK] Comprehensive .env file created successfully"
            
            # Display first few lines for verification (without sensitive data)
            echo "[VERIFY] .env file content (first 20 lines):"
            head -20 .env
            
            echo "[INFO] Frontend environment setup completed"
          REMOTE_EOF
        shell: bash

      - name: "[7/9] Deploy frontend with complete cleanup and rebuild"
        run: |
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            set -e
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            cd \$DEPLOY_DIR
            
            source .env
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[FRONTEND] Starting comprehensive frontend deployment..."
            
            # Step 1: Stop and remove existing frontend containers
            echo "[CLEANUP] Stopping and removing existing frontend containers..."
            if \$USE_SUDO docker compose ps frontend-nuxt | grep -q "Up"; then
              echo "[INFO] Frontend is currently running, performing graceful shutdown..."
              \$USE_SUDO docker compose stop frontend-nuxt
              sleep 3
            fi
            
            # Remove containers
            echo "[CLEANUP] Removing frontend containers..."
            \$USE_SUDO docker compose rm -f frontend-nuxt 2>/dev/null || true
            
            # Step 2: Clean up Docker images and system
            echo "[CLEANUP] Cleaning up Docker images and system..."
            
            # Remove old frontend images
            OLD_IMAGES=\$(\$USE_SUDO docker images | grep "tihomo.*frontend" | awk '{print \$3}' || true)
            if [ ! -z "\$OLD_IMAGES" ]; then
              echo "[CLEANUP] Removing old frontend images..."
              echo "\$OLD_IMAGES" | xargs -r \$USE_SUDO docker rmi -f 2>/dev/null || true
            fi
            
            # Clean up dangling images and volumes
            \$USE_SUDO docker system prune -f --volumes 2>/dev/null || true
            
            # Step 3: Force rebuild frontend image
            echo "[BUILD] Force rebuilding frontend image for ${{ inputs.environment }} environment..."
            echo "[BUILD] This will always use --no-cache for clean build..."
            
            # Always use no-cache for deployment to ensure latest code
            \$USE_SUDO docker compose build --no-cache --pull frontend-nuxt
            
            # Verify build succeeded
            if [ \$? -ne 0 ]; then
              echo "[ERROR] Frontend build failed"
              echo "[DEBUG] Checking build context and files..."
              
              echo "[DEBUG] Current directory: \$(pwd)"
              echo "[DEBUG] Contents of current directory:"
              ls -la
              
              echo "[DEBUG] Docker-compose file exists: \$(test -f docker-compose.yml && echo 'YES' || echo 'NO')"
              
              if [ -d "src/fe/nuxt" ]; then
                echo "[DEBUG] Frontend directory contents:"
                ls -la src/fe/nuxt/
                echo "[DEBUG] Dockerfile exists: \$(test -f src/fe/nuxt/Dockerfile && echo 'YES' || echo 'NO')"
                echo "[DEBUG] package.json exists: \$(test -f src/fe/nuxt/package.json && echo 'YES' || echo 'NO')"
                echo "[DEBUG] Nuxt config:"
                cat src/fe/nuxt/nuxt.config.ts | head -20 2>/dev/null || echo "No nuxt.config.ts found"
                
                if [ -f src/fe/nuxt/Dockerfile ]; then
                  echo "[DEBUG] Dockerfile first 10 lines:"
                  head -10 src/fe/nuxt/Dockerfile
                else
                  echo "[ERROR] Dockerfile missing in src/fe/nuxt/"
                fi
              else
                echo "[ERROR] src/fe/nuxt directory not found!"
                echo "[DEBUG] Searching for nuxt directories:"
                find . -name "*nuxt*" -type d 2>/dev/null || echo "No nuxt directories found"
              fi
              
              echo "[DEBUG] Docker-compose frontend service definition:"
              grep -A 10 "frontend-nuxt:" docker-compose.yml 2>/dev/null || echo "No frontend-nuxt service found in docker-compose.yml"
              
              exit 1
            fi
            
            echo "[BUILD] Frontend image built successfully"
            
            # Step 4: Deploy frontend with enhanced monitoring
            echo "[DEPLOY] Starting frontend service with enhanced monitoring..."
            \$USE_SUDO docker compose up -d --no-deps --force-recreate frontend-nuxt
            
            # Step 5: Enhanced health check with better error reporting
            echo "[HEALTH] Starting enhanced health check process..."
            max_attempts=30
            attempt=1
            
            while [ \$attempt -le \$max_attempts ]; do
              echo "[HEALTH] Health check attempt \$attempt/\$max_attempts..."
              
              # Check if container is running
              if \$USE_SUDO docker compose ps frontend-nuxt | grep -q "Up"; then
                echo "[OK] Frontend container is running"
                
                # Wait for Nuxt to initialize properly
                echo "[WAIT] Waiting for Nuxt application to initialize (15 seconds)..."
                sleep 15
                
                # Test HTTP response
                if \$USE_SUDO docker compose exec -T frontend-nuxt curl -f http://localhost:3000/ >/dev/null 2>&1; then
                  echo "[SUCCESS] ✅ Frontend is responding to HTTP requests!"
                  break
                elif \$USE_SUDO docker compose exec -T frontend-nuxt curl -s http://localhost:3000/ | grep -q "html\\|HTML"; then
                  echo "[SUCCESS] ✅ Frontend is serving content (HTTP 200)!"
                  break
                else
                  echo "[WAIT] Frontend not ready yet (attempt \$attempt/\$max_attempts)"
                  
                  # Show logs every 5 attempts for debugging
                  if [ \$((\$attempt % 5)) -eq 0 ]; then
                    echo "[DEBUG] Recent frontend logs (attempt \$attempt):"
                    \$USE_SUDO docker compose logs --tail=15 frontend-nuxt
                    echo "[DEBUG] Container status:"
                    \$USE_SUDO docker compose ps frontend-nuxt
                  fi
                  
                  sleep 10
                  ((attempt++))
                fi
              else
                echo "[ERROR] Frontend container not running (attempt \$attempt/\$max_attempts)"
                
                # Show container status and logs for debugging
                echo "[DEBUG] Container status:"
                \$USE_SUDO docker compose ps frontend-nuxt
                echo "[DEBUG] Recent logs:"
                \$USE_SUDO docker compose logs --tail=10 frontend-nuxt
                
                sleep 5
                ((attempt++))
              fi
            done
            
            # Final error handling
            if [ \$attempt -gt \$max_attempts ]; then
              echo "[ERROR] ❌ Frontend failed to start after \$max_attempts attempts"
              echo "[DEBUG] Complete troubleshooting information:"
              echo "=============================================="
              echo "[DEBUG] Container status:"
              \$USE_SUDO docker compose ps frontend-nuxt
              echo "=============================================="
              echo "[DEBUG] Last 50 lines of frontend logs:"
              \$USE_SUDO docker compose logs --tail=50 frontend-nuxt
              echo "=============================================="
              echo "[DEBUG] Docker system info:"
              \$USE_SUDO docker system df
              echo "=============================================="
              echo "[DEBUG] Available images:"
              \$USE_SUDO docker images | grep -E "(frontend|nuxt|tihomo)" || echo "No matching images found"
              echo "=============================================="
              exit 1
            fi
            
            echo "[SUCCESS] Frontend deployed successfully"
            
            # Show final status
            echo "[STATUS] Frontend service status:"
            \$USE_SUDO docker compose ps frontend-nuxt
            
            # Show recent logs for verification
            echo "[LOGS] Recent frontend logs:"
            \$USE_SUDO docker compose logs --tail=10 frontend-nuxt
          REMOTE_EOF
        shell: bash

      - name: "[8/9] Final health check and notification"
        run: |
          # Set deployment directory outside SSH session to ensure proper expansion
          DEPLOY_DIR="${{ env.TRUENAS_DEPLOY_DIR }}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << REMOTE_EOF
            # Use deployment directory passed from GitHub Actions
            DEPLOY_DIR="$DEPLOY_DIR"
            cd \$DEPLOY_DIR
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[HEALTH] Final frontend health check..."
            
            # Check container status
            if \$USE_SUDO docker compose ps frontend-nuxt | grep -q "Up"; then
              echo "[OK] Frontend container is running"
              
              # Check HTTP response
              if \$USE_SUDO docker compose exec -T frontend-nuxt curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "[OK] Frontend is serving HTTP requests"
                
                # Check API connectivity from frontend
                if \$USE_SUDO docker compose exec -T frontend-nuxt curl -f http://ocelot-gateway:8080/health >/dev/null 2>&1; then
                  echo "[OK] Frontend can connect to backend gateway"
                else
                  echo "[WARNING] Frontend cannot connect to backend gateway"
                fi
                
                echo "[SUCCESS] Frontend health check passed"
              else
                echo "[ERROR] Frontend HTTP check failed"
                \$USE_SUDO docker compose logs --tail=20 frontend-nuxt
                exit 1
              fi
            else
              echo "[ERROR] Frontend container is not running"
              \$USE_SUDO docker compose ps frontend-nuxt
              exit 1
            fi
            
            echo "[INFO] Full system status:"
            \$USE_SUDO docker compose ps --format "table {{.Name}}\\t{{.Status}}\\t{{.Ports}}"
          REMOTE_EOF
          
          # Send Discord notification
          webhook_url="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ -n "$webhook_url" ]; then
            curl -H "Content-Type: application/json" \
                 -d '{
                   "content": "✅ **Frontend Deployment SUCCESS**\n\n📊 **Info:**\n• **Environment:** `${{ inputs.environment }}`\n• **Branch:** `${{ github.ref_name }}`\n• **Force Rebuild:** `${{ inputs.force_rebuild }}`\n• **Frontend URL:** `http://<TRUENAS_IP>:3500`\n\n🚀 **Frontend is ready and serving requests**"
                 }' \
                 "$webhook_url" || echo "Discord notification failed"
          fi
        shell: bash

      - name: "[9/9] Send failure notification"
        if: failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ❌ **Frontend Deployment FAILED**
            
            📊 **Deployment Info:**
            • **Environment:** `${{ inputs.environment }}`
            • **Branch:** `${{ github.ref_name }}`
            • **Force Rebuild:** `${{ inputs.force_rebuild }}`
            • **Status:** `FAILED`
            
            🚨 **Frontend deployment issues - check logs for details**
            
            [📋 View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})