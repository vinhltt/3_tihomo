name: Deploy Backend Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      services:
        description: 'Services to deploy (comma separated: identity-api,corefinance-api,excel-api,ocelot-gateway or "all")'
        required: false
        default: 'all'
        type: string
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean
      skip_infrastructure_check:
        description: 'Skip infrastructure dependency check'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      services:
        required: false
        type: string
        default: 'all'
      force_rebuild:
        required: false
        type: boolean
        default: false
      skip_infrastructure_check:
        required: false
        type: boolean
        default: false

concurrency:
  group: tihomo-backend-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  check-infrastructure:
    if: ${{ !inputs.skip_infrastructure_check }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 5
    
    steps:
      - name: Setup SSH and check infrastructure
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"
        shell: bash

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Check infrastructure readiness
        run: |
          DEPLOY_DIR="${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}"
          
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd $DEPLOY_DIR
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[CHECK] Verifying infrastructure services..."
            
            REQUIRED_SERVICES=("identity-postgres" "corefinance-postgres" "redis" "rabbitmq")
            MISSING_SERVICES=()
            
            for service in "\${REQUIRED_SERVICES[@]}"; do
              if ! \$USE_SUDO docker compose ps \$service | grep -q "Up"; then
                MISSING_SERVICES+=("\$service")
              fi
            done
            
            if [ \${#MISSING_SERVICES[@]} -gt 0 ]; then
              echo "[ERROR] Missing infrastructure services: \${MISSING_SERVICES[*]}"
              echo "[ACTION] Please run infrastructure deployment first"
              exit 1
            fi
            
            echo "[OK] All required infrastructure services are running"
          EOF
        shell: bash

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [check-infrastructure]
    if: always() && (needs.check-infrastructure.result == 'success' || inputs.skip_infrastructure_check)
    environment: ${{ inputs.environment }}
    timeout-minutes: 25
    
    steps:
      - name: "[1/10] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/10] Setup environment"
        run: |
          # Clean project name - remove special characters and ensure lowercase
          CLEAN_ENV=$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=tihomo_${CLEAN_ENV}" >> $GITHUB_ENV
          echo "[INFO] Environment: '${{ inputs.environment }}' → cleaned: '${CLEAN_ENV}'"
          
          # Parse services input
          if [ "${{ inputs.services }}" = "all" ]; then
            echo "DEPLOY_SERVICES=identity-api,corefinance-api,excel-api,ocelot-gateway" >> $GITHUB_ENV
          else
            echo "DEPLOY_SERVICES=${{ inputs.services }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: "[3/10] Setup SSH"
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"
        shell: bash

      - name: "[4/10] Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: "[5/10] Prepare deployment directory"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel /bin/bash << 'EOF'
            echo "[PREP] Preparing deployment directory with proper permissions..."
            
            # Create required directories
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/uploads
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/logs
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/config
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/scripts
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/.rsync-partial
            
            # Set permissive permissions to avoid rsync issues
            chmod 755 ${{ env.TRUENAS_DEPLOY_DIR }}
            chmod -R 755 ${{ env.TRUENAS_DEPLOY_DIR }}/uploads 2>/dev/null || true
            chmod -R 755 ${{ env.TRUENAS_DEPLOY_DIR }}/logs 2>/dev/null || true
            chmod -R 755 ${{ env.TRUENAS_DEPLOY_DIR }}/config 2>/dev/null || true
            chmod -R 755 ${{ env.TRUENAS_DEPLOY_DIR }}/scripts 2>/dev/null || true
            chmod -R 755 ${{ env.TRUENAS_DEPLOY_DIR }}/.rsync-partial 2>/dev/null || true
            
            # Check if previous deployment exists and clean problematic files
            if [ -d "${{ env.TRUENAS_DEPLOY_DIR }}/src" ]; then
              echo "[CLEANUP] Cleaning previous deployment files that might cause permission issues..."
              
              # Fix directory permissions recursively
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type d -exec chmod 755 {} \; 2>/dev/null || true
              
              # Fix file permissions for common problematic files
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type f -name "*.yml" -exec chmod 644 {} \; 2>/dev/null || true
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type f -name "*.yaml" -exec chmod 644 {} \; 2>/dev/null || true
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type f -name "*.sh" -exec chmod 755 {} \; 2>/dev/null || true
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type f -name "*.sql" -exec chmod 644 {} \; 2>/dev/null || true
              find ${{ env.TRUENAS_DEPLOY_DIR }} -type f -name "*.conf" -exec chmod 644 {} \; 2>/dev/null || true
              
              # Special handling for database init directories that cause rsync issues
              if [ -d "${{ env.TRUENAS_DEPLOY_DIR }}/scripts" ]; then
                echo "[CLEANUP] Fixing database init script directories..."
                find ${{ env.TRUENAS_DEPLOY_DIR }}/scripts -name "init-*-db.sql" -type d -exec chmod 755 {} \; 2>/dev/null || true
                find ${{ env.TRUENAS_DEPLOY_DIR }}/scripts -path "*/init-*-db.sql/*" -name "*.sql" -exec chmod 644 {} \; 2>/dev/null || true
                
                # Remove any temporary rsync files that might cause conflicts
                find ${{ env.TRUENAS_DEPLOY_DIR }}/scripts -name ".*" -type f -delete 2>/dev/null || true
              fi
            fi
            
            echo "[OK] Prepared deployment directory: ${{ env.TRUENAS_DEPLOY_DIR }}"
          EOF
        shell: bash

      - name: "[6/10] Sync project files"
        run: |
          echo "[SYNC] Starting project files sync to TrueNAS..."
          
          # Enhanced rsync with robust error handling and permissions management
          rsync -rltvz --safe-links \
            --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            --no-perms --no-owner --no-group \
            --ignore-errors \
            --force \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'node_modules/' \
            --exclude 'bin/' \
            --exclude 'obj/' \
            --exclude '.nuxt/' \
            --exclude 'src/fe/' \
            --exclude '*.log' \
            --exclude 'coverage/' \
            --exclude 'TestResults/' \
            --exclude '.vs/' \
            --exclude '.vscode/' \
            --exclude '*.tmp' \
            --exclude '*.temp' \
            --exclude '.DS_Store' \
            --exclude 'Thumbs.db' \
            --delete \
            --delete-excluded \
            --partial \
            --partial-dir=.rsync-partial \
            --progress \
            --human-readable \
            -e "ssh -F $HOME/.ssh/config -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30" \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/" || {
              RSYNC_EXIT_CODE=$?
              echo "[ERROR] Rsync failed with exit code: $RSYNC_EXIT_CODE"
              
              case $RSYNC_EXIT_CODE in
                1)  echo "[ERROR] Syntax or usage error" ;;
                2)  echo "[ERROR] Protocol incompatibility" ;;
                3)  echo "[ERROR] Errors selecting input/output files, dirs" ;;
                11) echo "[ERROR] Error in file I/O" ;;
                12) echo "[ERROR] Error in rsync protocol data stream" ;;
                13) echo "[ERROR] Errors with program diagnostics" ;;
                23) echo "[WARNING] Partial transfer due to error - some files may not have transferred correctly" ;;
                24) echo "[ERROR] Partial transfer due to vanished source files" ;;
                *)  echo "[ERROR] Unknown rsync error code: $RSYNC_EXIT_CODE" ;;
              esac
              
              # Handle common non-critical errors that shouldn't stop deployment
              if [ $RSYNC_EXIT_CODE -eq 23 ]; then
                echo "[WARNING] Continuing deployment despite rsync warnings (exit code $RSYNC_EXIT_CODE)"
                echo "[INFO] This usually indicates file permission/attribute warnings that don't affect functionality"
              else
                echo "[ERROR] Critical rsync error, stopping deployment"
                exit $RSYNC_EXIT_CODE
              fi
            }
          
          echo "[OK] Project files synced successfully"
        shell: bash

      - name: "[7/10] Verify environment file"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel /bin/bash << 'REMOTE_EOF'
            # Ensure directory exists and navigate to it
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            echo "[INFO] Working in directory: $(pwd)"
            
            if [ ! -f .env ]; then
              echo "[WARNING] .env file not found - attempting to create from infrastructure deployment"
              
              # Check if we should skip infrastructure dependency
              if [ "${{ inputs.skip_infrastructure_check }}" = "true" ]; then
                echo "[INFO] Skipping infrastructure check as requested"
                echo "[INFO] Creating minimal .env file for backend deployment"
                
                # Create minimal .env with required backend variables using echo statements
                echo "# Minimal environment configuration for backend deployment" > .env
                echo "JWT_SECRET_KEY=your_super_secret_jwt_key_change_in_production" >> .env
                echo "JWT_ISSUER=TiHoMo" >> .env
                echo "JWT_AUDIENCE=TiHoMo" >> .env
                echo "GATEWAY_PORT=5000" >> .env
                echo "COMPOSE_PROJECT_NAME=tihomo_development" >> .env
                echo "[OK] Created minimal .env file"
              else
                echo "[ERROR] .env file not found and infrastructure check not skipped"
                echo "[ACTION] Please run infrastructure deployment first or use skip_infrastructure_check=true"
                exit 1
              fi
            fi
            
            echo "[INFO] .env file exists, checking backend-related variables..."
            
            # Verify critical backend variables exist
            BACKEND_VARS=("JWT_SECRET_KEY" "GATEWAY_PORT" "JWT_ISSUER")
            MISSING_VARS=()
            
            for var in "${BACKEND_VARS[@]}"; do
              if ! grep -q "^${var}=" .env; then
                MISSING_VARS+=("$var")
              fi
            done
            
            if [ ${#MISSING_VARS[@]} -gt 0 ]; then
              echo "[WARNING] Missing backend variables: ${MISSING_VARS[*]}"
            else
              echo "[OK] All backend variables are present"
            fi
            
            echo "[INFO] Backend environment verified"
          REMOTE_EOF
        shell: bash

      - name: "[8/10] Deploy backend services with dependency management"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel /bin/bash << 'EOF'
            set -e
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            source .env
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[INFO] Deploying backend services for ${{ inputs.environment }} environment..."
            
            # Parse services to deploy
            IFS=',' read -ra SERVICES_ARRAY <<< "${{ env.DEPLOY_SERVICES }}"
            
            echo "[BACKEND] Deploying backend services: ${SERVICES_ARRAY[*]}"
            
            # Define service dependencies and deployment order
            declare -A SERVICE_DEPS
            SERVICE_DEPS["identity-api"]="identity-postgres redis"
            SERVICE_DEPS["corefinance-api"]="corefinance-postgres identity-api redis"
            SERVICE_DEPS["excel-api"]="corefinance-api"
            SERVICE_DEPS["ocelot-gateway"]="identity-api corefinance-api"
            
            # Function to stop dependent services
            stop_dependents() {
              local service=$1
              echo "[STOP] Checking for services that depend on $service..."
              
              case $service in
                identity-api)
                  # Stop services that depend on identity-api
                  for dep_service in "corefinance-api" "excel-api" "ocelot-gateway" "frontend-nuxt"; do
                    if $USE_SUDO docker compose ps $dep_service | grep -q "Up"; then
                      echo "[STOP] Stopping dependent service: $dep_service"
                      $USE_SUDO docker compose stop $dep_service
                    fi
                  done
                  ;;
                corefinance-api)
                  # Stop services that depend on corefinance-api
                  for dep_service in "excel-api" "ocelot-gateway" "frontend-nuxt"; do
                    if $USE_SUDO docker compose ps $dep_service | grep -q "Up"; then
                      echo "[STOP] Stopping dependent service: $dep_service"
                      $USE_SUDO docker compose stop $dep_service
                    fi
                  done
                  ;;
                ocelot-gateway)
                  # Stop frontend that depends on gateway
                  if $USE_SUDO docker compose ps frontend-nuxt | grep -q "Up"; then
                    echo "[STOP] Stopping dependent service: frontend-nuxt"
                    $USE_SUDO docker compose stop frontend-nuxt
                  fi
                  ;;
              esac
            }
            
            # Function to restart dependent services
            restart_dependents() {
              local service=$1
              echo "[RESTART] Restarting services that depend on $service..."
              
              case $service in
                identity-api)
                  # Check and restart dependents in order
                  for dep_service in "corefinance-api" "excel-api" "ocelot-gateway"; do
                    if $USE_SUDO docker compose ps $dep_service | grep -q "Exited"; then
                      echo "[RESTART] Restarting: $dep_service"
                      $USE_SUDO docker compose start $dep_service
                      sleep 10
                    fi
                  done
                  ;;
                corefinance-api)
                  for dep_service in "excel-api" "ocelot-gateway"; do
                    if $USE_SUDO docker compose ps $dep_service | grep -q "Exited"; then
                      echo "[RESTART] Restarting: $dep_service"
                      $USE_SUDO docker compose start $dep_service
                      sleep 10
                    fi
                  done
                  ;;
              esac
            }
            
            # Build images if needed
            if [ "${{ inputs.force_rebuild }}" = "true" ]; then
              echo "[BUILD] Force rebuilding backend images..."
              for service in "${SERVICES_ARRAY[@]}"; do
                $USE_SUDO docker compose build --no-cache $service
              done
            else
              echo "[BUILD] Building backend images with cache..."
              for service in "${SERVICES_ARRAY[@]}"; do
                $USE_SUDO docker compose build $service
              done
            fi
            
            # Deploy each service with dependency management
            for service in "${SERVICES_ARRAY[@]}"; do
              echo "[DEPLOY] Deploying $service..."
              
              # Stop dependent services first
              stop_dependents $service
              
              # Check dependencies are running
              if [ -n "${SERVICE_DEPS[$service]}" ]; then
                echo "[CHECK] Verifying dependencies for $service: ${SERVICE_DEPS[$service]}"
                for dep in ${SERVICE_DEPS[$service]}; do
                  if ! $USE_SUDO docker compose ps $dep | grep -q "Up"; then
                    echo "[ERROR] Dependency $dep is not running for $service"
                    exit 1
                  fi
                done
              fi
              
              # Deploy the service
              $USE_SUDO docker compose up -d --no-deps --force-recreate $service
              
              # Wait for service to be ready
              max_attempts=15
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                if $USE_SUDO docker compose ps $service | grep -q "Up"; then
                  echo "[OK] Service $service is running"
                  
                  # Additional health check for APIs
                  if [[ $service == *"api" ]] || [[ $service == *"gateway" ]]; then
                    echo "[HEALTH] Waiting for $service to be ready..."
                    sleep 15
                    
                    # Simple health check
                    if $USE_SUDO docker compose exec -T $service curl -f http://localhost:8080/health >/dev/null 2>&1; then
                      echo "[OK] $service health check passed"
                    else
                      echo "[WARNING] $service health check failed, but container is running"
                    fi
                  fi
                  break
                else
                  echo "[WAIT] Service $service not ready yet (attempt $attempt/$max_attempts)"
                  sleep 10
                  ((attempt++))
                fi
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "[ERROR] Service $service failed to start"
                $USE_SUDO docker compose logs --tail=20 $service
                exit 1
              fi
              
              # Restart dependent services
              restart_dependents $service
              
              echo "[SUCCESS] Service $service deployed successfully"
            done
            
            echo "[SUCCESS] All backend services deployed successfully"
          EOF
        shell: bash

      - name: "[9/10] Health check backend services"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel /bin/bash << 'EOF'
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[HEALTH] Backend services health check..."
            
            IFS=',' read -ra SERVICES_ARRAY <<< "${{ env.DEPLOY_SERVICES }}"
            
            for service in "${SERVICES_ARRAY[@]}"; do
              if $USE_SUDO docker compose ps $service | grep -q "Up"; then
                echo "[OK] $service is running"
                
                # API health check
                if [[ $service == *"api" ]] || [[ $service == *"gateway" ]]; then
                  if $USE_SUDO docker compose exec -T $service curl -f http://localhost:8080/health >/dev/null 2>&1; then
                    echo "[OK] $service health endpoint responsive"
                  else
                    echo "[WARNING] $service health endpoint not responsive"
                  fi
                fi
              else
                echo "[ERROR] $service is not running"
              fi
            done
            
            echo "[INFO] Backend deployment status:"
            $USE_SUDO docker compose ps --format "table {{.Name}}\t{{.Status}}"
          EOF
        shell: bash

      - name: "[10/10] Send notification"
        if: always()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '✅ **Backend Services Deployment SUCCESS**' || '❌ **Backend Services Deployment FAILED**' }}
            
            📊 **Deployment Info:**
            • **Environment:** `${{ inputs.environment }}`
            • **Services:** `${{ env.DEPLOY_SERVICES }}`
            • **Branch:** `${{ github.ref_name }}`
            • **Force Rebuild:** `${{ inputs.force_rebuild }}`
            • **Status:** `${{ job.status }}`
            
            ${{ job.status == 'success' && '🚀 **Backend services ready for frontend deployment**' || '🚨 **Backend deployment issues - check logs**' }}
