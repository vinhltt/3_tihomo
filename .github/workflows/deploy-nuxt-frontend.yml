name: Deploy Nuxt Frontend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: string
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - master
      - develop
    paths:
      - 'src/fe/nuxt/**'
      - '.github/workflows/deploy-nuxt-frontend.yml'
      - 'docker-compose.services.yml'
      - 'docker-compose.ghcr.yml'
  pull_request:
    branches:
      - master
      - develop
    paths:
      - 'src/fe/nuxt/**'

concurrency:
  group: tihomo-nuxt-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # Build and test Nuxt frontend
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: "[1/8] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/8] Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/fe/nuxt/package-lock.json

      - name: "[3/8] Install dependencies"
        run: |
          cd src/fe/nuxt
          # Try npm ci first, fallback to npm install with legacy peer deps
          npm ci --prefer-offline --no-audit || {
            echo "npm ci failed, running npm install with legacy peer deps..."
            rm -f package-lock.json
            npm install --legacy-peer-deps
          }

      - name: "[4/8] Verify dependencies"
        run: |
          cd src/fe/nuxt
          echo "📦 Dependency verification:"
          if [ -f package-lock.json ]; then
            echo "✅ package-lock.json exists"
            echo "📊 Installed packages summary:"
            npm list --depth=0 || echo "Some peer dependency warnings (expected)"
          else
            echo "⚠️ package-lock.json missing"
          fi
          
          # Check for specific problematic packages
          echo "🔍 Checking for known conflict packages:"
          if npm list sortablejs 2>/dev/null; then
            echo "✅ sortablejs installed successfully"
          else
            echo "⚠️ sortablejs missing - may cause build issues"
          fi

      - name: "[5/8] Run linting"
        run: |
          cd src/fe/nuxt
          npm run lint

      - name: "[6/8] Run type checking"
        run: |
          cd src/fe/nuxt
          npm run type-check || echo "Type checking completed with warnings"

      - name: "[7/8] Build for production"
        run: |
          cd src/fe/nuxt
          npm run build
        env:
          NODE_ENV: production
          NUXT_TELEMETRY_DISABLED: 1

      - name: "[8/10] Setup Docker Buildx"
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: "[9/10] Login to GitHub Container Registry"
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "[10/10] Generate Docker tags"
        if: github.event_name != 'pull_request'
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/tihomo-frontend-nuxt"
          
          # Generate clean tags
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          TAGS="${IMAGE_NAME}:${BRANCH_NAME}"
          TAGS="${TAGS},${IMAGE_NAME}:sha-${COMMIT_SHA}"
          
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            TAGS="${TAGS},${IMAGE_NAME}:latest"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "image=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          
          echo "Generated tags: ${TAGS}"

      - name: "[11/11] Build and push Docker image"
        if: github.event_name != 'pull_request'
        id: build
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/tihomo-frontend-nuxt"
          
          # Generate clean tags without metadata action
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9._-]/-/g')
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          # Build tags
          TAG_BRANCH="${IMAGE_NAME}:${BRANCH_NAME}"
          TAG_SHA="${IMAGE_NAME}:sha${COMMIT_SHA}"  # No dash before SHA
          
          echo "Building and pushing with tags:"
          echo "  - $TAG_BRANCH"
          echo "  - $TAG_SHA"
          
          # Build and push with multiple tags
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag "$TAG_BRANCH" \
            --tag "$TAG_SHA" \
            --label "org.opencontainers.image.title=TiHoMo Frontend" \
            --label "org.opencontainers.image.description=Nuxt 3 Frontend for TiHoMo Application" \
            --label "org.opencontainers.image.vendor=TiHoMo Team" \
            --label "org.opencontainers.image.source=${{ github.repositoryUrl }}" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            ./src/fe/nuxt
          
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Also tagging as latest..."
            docker buildx imagetools create --tag "${IMAGE_NAME}:latest" "$TAG_BRANCH"
          fi
          
          echo "Build completed successfully!"

  # Deploy to TrueNAS
  deploy:
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}
    timeout-minutes: 15

    steps:
      - name: "[1/6] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/6] Setup environment variables"
        run: |
          CLEAN_ENV=$(echo "${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${CLEAN_ENV}" >> $GITHUB_ENV
          echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/tihomo-frontend-nuxt:${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: "[3/6] Setup SSH and Cloudflared"
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"

      - name: "[4/6] Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: "[5/6] Deploy Nuxt frontend"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Check Docker access
            if docker ps >/dev/null 2>&1; then
              USE_SUDO=""
            else
              USE_SUDO="sudo"
            fi
            
            echo "[INFO] Deploying Nuxt frontend..."
            echo "[INFO] Environment: ${{ env.ENVIRONMENT }}"
            echo "[INFO] Image: ${{ env.IMAGE_TAG }}"
            
            # Pull latest frontend image
            echo "[PULL] Pulling latest frontend image..."
            $USE_SUDO docker pull ${{ env.IMAGE_TAG }}
            
            # Update environment variable for image tag
            if grep -q "FRONTEND_IMAGE_TAG=" .env; then
              sed -i 's|FRONTEND_IMAGE_TAG=.*|FRONTEND_IMAGE_TAG=${{ github.ref_name }}|' .env
            else
              echo "FRONTEND_IMAGE_TAG=${{ github.ref_name }}" >> .env
            fi
            
            # Choose compose file based on environment
            if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
              COMPOSE_FILE="docker-compose.ghcr.yml"
              echo "[INFO] Using production compose file: $COMPOSE_FILE"
            else
              COMPOSE_FILE="docker-compose.services.yml"
              echo "[INFO] Using development compose file: $COMPOSE_FILE"
            fi
            
            # Deploy frontend service
            echo "[DEPLOY] Deploying frontend service..."
            $USE_SUDO docker compose -f $COMPOSE_FILE up -d --no-deps --force-recreate frontend-nuxt
            
            # Wait for service to be ready
            echo "[HEALTH] Waiting for frontend to be ready..."
            max_attempts=12
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if $USE_SUDO docker compose -f $COMPOSE_FILE ps frontend-nuxt | grep -q "Up"; then
                echo "[OK] Frontend container is running"
                
                # Additional health check
                sleep 10
                if $USE_SUDO docker compose -f $COMPOSE_FILE exec -T frontend-nuxt curl -f http://localhost:3000/ >/dev/null 2>&1; then
                  echo "[SUCCESS] Frontend health check passed"
                  break
                else
                  echo "[INFO] Frontend responding but health check not ready yet"
                fi
              else
                echo "[WAIT] Frontend not ready yet (attempt $attempt/$max_attempts)"
              fi
              
              sleep 15
              ((attempt++))
            done
            
            if [ $attempt -gt $max_attempts ]; then
              echo "[WARNING] Frontend deployment may need more time to stabilize"
              echo "[DEBUG] Recent frontend logs:"
              $USE_SUDO docker compose -f $COMPOSE_FILE logs --tail=20 frontend-nuxt
            else
              echo "[SUCCESS] Frontend deployed successfully!"
            fi
            
            # Show deployment info
            echo "[INFO] Deployment summary:"
            $USE_SUDO docker compose -f $COMPOSE_FILE ps frontend-nuxt
          EOF

      - name: "[6/6] Send notification"
        if: always()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '🚀 **Nuxt Frontend Deployment SUCCESS**' || '❌ **Nuxt Frontend Deployment FAILED**' }}
            
            📱 **Frontend Info:**
            • **Environment:** `${{ env.ENVIRONMENT }}`
            • **Branch:** `${{ github.ref_name }}`
            • **Image:** `${{ env.IMAGE_TAG }}`
            • **Access:** `http://<TRUENAS_IP>:${{ vars.FRONTEND_PORT || '3500' }}`
            
            ${{ job.status == 'success' && '✨ **Frontend is live and ready!**' || '🚨 **Check deployment logs for details**' }}