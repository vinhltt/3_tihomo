name: Auto Deploy TiHoMo to TrueNAS

on:
  workflow_dispatch:
    # Cho phép kích hoạt thủ công với tùy chọn environment
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_health_checks:
        description: 'Skip health checks (for testing)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ master, develop ]

# Chia group concurrency theo từng branch (mỗi branch sẽ có hàng đợi riêng)
# Nếu có workflow mới trên cùng một branch, workflow cũ sẽ bị cancel, chỉ giữ lại workflow mới nhất
concurrency:
  group: tihomo-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest # Sử dụng GitHub-hosted runner
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}
    # Đặt thời gian timeout cho toàn bộ job này là 30 phút
    timeout-minutes: 30 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Required Secrets and Variables
        run: |
          echo "[CHECK] Kiểm tra các secrets và variables cần thiết..."
          
          # Kiểm tra các secrets quan trọng
          MISSING_SECRETS=()
          
          if [ -z "${{ secrets.JWT_SECRET_KEY }}" ]; then
            MISSING_SECRETS+=("JWT_SECRET_KEY")
          else
            echo "[OK] JWT_SECRET_KEY: Có (độ dài: ${#JWT_SECRET_KEY} ký tự)"
          fi
          
          if [ -z "${{ secrets.IDENTITY_DB_PASSWORD }}" ]; then
            MISSING_SECRETS+=("IDENTITY_DB_PASSWORD")
          else
            echo "[OK] IDENTITY_DB_PASSWORD: Có"
          fi
          
          if [ -z "${{ secrets.COREFINANCE_DB_PASSWORD }}" ]; then
            MISSING_SECRETS+=("COREFINANCE_DB_PASSWORD")
          else
            echo "[OK] COREFINANCE_DB_PASSWORD: Có"
          fi
          
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            MISSING_SECRETS+=("REDIS_PASSWORD")
          else
            echo "[OK] REDIS_PASSWORD: Có"
          fi
          
          if [ -z "${{ secrets.RABBITMQ_PASSWORD }}" ]; then
            MISSING_SECRETS+=("RABBITMQ_PASSWORD")
          else
            echo "[OK] RABBITMQ_PASSWORD: Có"
          fi
          
          if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
            echo "[ERROR] Thiếu các secrets sau:"
            printf '%s\n' "${MISSING_SECRETS[@]}"
            echo "[INFO] Vui lòng cấu hình tại: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          echo "[OK] Tất cả secrets cần thiết đã được cấu hình"
        shell: bash
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          echo "Runner HOME directory is: $HOME"
          # Cài đặt cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"

          # Tạo thư mục $HOME/.ssh nếu chưa tồn tại
          mkdir -p "$HOME/.ssh"
          
          # Tạo tệp cấu hình SSH sử dụng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config"
          
          chmod 600 "$HOME/.ssh/config"
          echo "[OK] SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: DEBUG - Verify SSH Config File
        run: |
          echo "--- Verifying SSH config file ---"
          if [ -f "$HOME/.ssh/config" ]; then
            echo "[OK] SSH Config file exists at $HOME/.ssh/config"
            echo "--- Contents of $HOME/.ssh/config ---"
            cat "$HOME/.ssh/config"
            echo "-------------------------------------"
            echo "--- Listing $HOME/.ssh directory ---"
            ls -la "$HOME/.ssh"
            echo "------------------------------------"
          else
            echo "[ERROR] SSH Config file NOT FOUND at $HOME/.ssh/config"
            echo "--- Listing $HOME directory ---"
            ls -la "$HOME"
            echo "-------------------------------"
            exit 1
          fi
        shell: bash

      - name: Prepare deploy directory on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/uploads
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/logs
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/config
            echo "[OK] Prepared TrueNAS deploy directory: ${{ env.TRUENAS_DEPLOY_DIR }}"
          EOF
        shell: bash

      - name: Sync project files to TrueNAS
        run: |
          echo "[SYNC] Starting project files sync to TrueNAS..."
          
          # Enhanced rsync with better error handling and permissions management
          rsync -avz --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            --no-perms --no-owner --no-group \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'node_modules/' \
            --exclude 'bin/' \
            --exclude 'obj/' \
            --exclude '*.log' \
            --exclude 'TestResults/' \
            --exclude '.vs/' \
            --exclude '.vscode/' \
            --exclude 'uploads/' \
            --exclude 'logs/' \
            --exclude '*.tmp' \
            --exclude '*.temp' \
            --exclude '.DS_Store' \
            --exclude 'Thumbs.db' \
            --delete \
            --partial \
            --progress \
            -e "ssh -F $HOME/.ssh/config -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/" || {
              RSYNC_EXIT_CODE=$?
              echo "[ERROR] Rsync failed with exit code: $RSYNC_EXIT_CODE"
              
              case $RSYNC_EXIT_CODE in
                1)  echo "[ERROR] Syntax or usage error" ;;
                2)  echo "[ERROR] Protocol incompatibility" ;;
                3)  echo "[ERROR] Errors selecting input/output files, dirs" ;;
                4)  echo "[ERROR] Requested action not supported" ;;
                5)  echo "[ERROR] Error starting client-server protocol" ;;
                6)  echo "[ERROR] Daemon unable to append to log-file" ;;
                10) echo "[ERROR] Error in socket I/O" ;;
                11) echo "[ERROR] Error in file I/O" ;;
                12) echo "[ERROR] Error in rsync protocol data stream" ;;
                13) echo "[ERROR] Errors with program diagnostics" ;;
                14) echo "[ERROR] Error in IPC code" ;;
                20) echo "[ERROR] Received SIGUSR1 or SIGINT" ;;
                21) echo "[ERROR] Some error returned by waitpid()" ;;
                22) echo "[ERROR] Error allocating core memory buffers" ;;
                23) echo "[WARNING] Partial transfer due to error - some files may not have transferred correctly" ;;
                24) echo "[ERROR] Partial transfer due to vanished source files" ;;
                25) echo "[ERROR] The --max-delete limit stopped deletions" ;;
                30) echo "[ERROR] Timeout in data send/receive" ;;
                35) echo "[ERROR] Timeout waiting for daemon connection" ;;
                *)  echo "[ERROR] Unknown rsync error code: $RSYNC_EXIT_CODE" ;;
              esac
              
              # For exit code 23, continue with deployment as it's often just permission warnings
              if [ $RSYNC_EXIT_CODE -eq 23 ]; then
                echo "[WARNING] Continuing deployment despite rsync warnings (exit code 23)"
                echo "[INFO] This usually indicates file permission warnings that don't affect functionality"
              else
                echo "[ERROR] Critical rsync error, stopping deployment"
                exit $RSYNC_EXIT_CODE
              fi
            }
          
          echo "[OK] Project files sync completed to TrueNAS"
        shell: bash

      - name: Create .env file on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel "cat > ${{ env.TRUENAS_DEPLOY_DIR }}/.env << 'EOF'
          # Project name
          COMPOSE_PROJECT_NAME=tihomo_${{ inputs.environment || 'development' }}
          
          # Core Configuration
          GATEWAY_PORT=${{ vars.GATEWAY_PORT || '5000' }}
          FRONTEND_PORT=${{ vars.FRONTEND_PORT || '3500' }}
          JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}'
          
          # Database Configuration - Identity
          IDENTITY_DB_USERNAME=${{ secrets.IDENTITY_DB_USERNAME || 'identity_user' }}
          IDENTITY_DB_PASSWORD='${{ secrets.IDENTITY_DB_PASSWORD }}'
          IDENTITY_DB_PORT=${{ vars.IDENTITY_DB_PORT || '5831' }}
          
          # Database Configuration - CoreFinance
          COREFINANCE_DB_USERNAME=${{ secrets.COREFINANCE_DB_USERNAME || 'corefinance_user' }}
          COREFINANCE_DB_PASSWORD='${{ secrets.COREFINANCE_DB_PASSWORD }}'
          COREFINANCE_DB_PORT=${{ vars.COREFINANCE_DB_PORT || '5832' }}
          
          # Database Configuration - MoneyManagement
          MONEYMANAGEMENT_DB_USERNAME=${{ secrets.MONEYMANAGEMENT_DB_USERNAME || 'money_user' }}
          MONEYMANAGEMENT_DB_PASSWORD='${{ secrets.MONEYMANAGEMENT_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          MONEYMANAGEMENT_DB_PORT=${{ vars.MONEYMANAGEMENT_DB_PORT || '5835' }}
          
          # Database Configuration - PlanningInvestment
          PLANNINGINVESTMENT_DB_USERNAME=${{ secrets.PLANNINGINVESTMENT_DB_USERNAME || 'planning_user' }}
          PLANNINGINVESTMENT_DB_PASSWORD='${{ secrets.PLANNINGINVESTMENT_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          PLANNINGINVESTMENT_DB_PORT=${{ vars.PLANNINGINVESTMENT_DB_PORT || '5836' }}
          
          # Database Configuration - Reporting
          REPORTING_DB_PASSWORD='${{ secrets.REPORTING_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          REPORTING_DB_PORT=${{ vars.REPORTING_DB_PORT || '5837' }}
          
          # Redis Configuration
          REDIS_PORT=${{ vars.REDIS_PORT || '6379' }}
          REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}'
          
          # RabbitMQ Configuration
          RABBITMQ_PORT=${{ vars.RABBITMQ_PORT || '5672' }}
          RABBITMQ_MANAGEMENT_PORT=${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}
          RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}'
          
          # Monitoring Configuration
          PROMETHEUS_PORT=${{ vars.PROMETHEUS_PORT || '9090' }}
          GRAFANA_PORT=${{ vars.GRAFANA_PORT || '3002' }}
          GRAFANA_ADMIN_PASSWORD='${{ secrets.GRAFANA_ADMIN_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          LOKI_PORT=${{ vars.LOKI_PORT || '3100' }}
          
          # Development Tools
          PGADMIN_PORT=${{ vars.PGADMIN_PORT || '8081' }}
          PGADMIN_PASSWORD='${{ secrets.PGADMIN_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          MAILHOG_SMTP_PORT=${{ vars.MAILHOG_SMTP_PORT || '1025' }}
          MAILHOG_UI_PORT=${{ vars.MAILHOG_UI_PORT || '8025' }}
          
          # Nginx Configuration
          NGINX_HTTP_PORT=${{ vars.NGINX_HTTP_PORT || '8082' }}
          NGINX_HTTPS_PORT=${{ vars.NGINX_HTTPS_PORT || '8443' }}
          
          # Network Configuration
          DOCKER_NETWORK_SUBNET=${{ vars.DOCKER_NETWORK_SUBNET || '172.20.0.0/16' }}
          
          # Application Environment
          NODE_ENV=${{ vars.NODE_ENV || 'production' }}
          ASPNETCORE_ENVIRONMENT=${{ vars.ASPNETCORE_ENVIRONMENT || 'Production' }}
          
          # OAuth Configuration
          APP_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.APP_PUBLIC_GOOGLE_CLIENT_ID }}
          
          # JWT Configuration
          JWT_ISSUER=${{ vars.JWT_ISSUER || 'http://localhost:5000' }}
          JWT_AUDIENCE_OCELOT_GATEWAY=${{ vars.JWT_AUDIENCE_OCELOT_GATEWAY || 'TiHoMo.Gateway' }}
          JWT_AUDIENCE_IDENTITY_API=${{ vars.JWT_AUDIENCE_IDENTITY_API || 'TiHoMo.Identity' }}
          JWT_AUDIENCE_COREFINANCE_API=${{ vars.JWT_AUDIENCE_COREFINANCE_API || 'TiHoMo.CoreFinance' }}
          
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ vars.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ vars.TZ || 'Asia/Ho_Chi_Minh' }}
          
          # Build Configuration - Force production stage for deployment
          NUXT_BUILD_TARGET=production
          NUXT_DEV_SSR=${{ vars.NUXT_DEV_SSR || 'false' }}
          NUXT_DEBUG=${{ vars.NUXT_DEBUG || 'false' }}
          NUXT_DEV_TOOLS=${{ vars.NUXT_DEV_TOOLS || 'false' }}
          NUXT_TELEMETRY_DISABLED=1
          
          # Logging Configuration
          LOG_LEVEL=${{ vars.LOG_LEVEL || 'info' }}
          LOG_FORMAT=${{ vars.LOG_FORMAT || 'json' }}
          
          # Feature Toggles
          ENABLE_PWA=${{ vars.ENABLE_PWA || 'false' }}
          ENABLE_ANALYTICS=${{ vars.ENABLE_ANALYTICS || 'false' }}
          
          # Deployment Information
          DEPLOY_BRANCH=${{ github.ref_name }}
          DEPLOY_COMMIT=${{ github.sha }}
          DEPLOY_TIME=\$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF"
          echo "[OK] .env file created on TrueNAS at ${{ env.TRUENAS_DEPLOY_DIR }}/.env"
        shell: bash

      - name: Debug Environment Configuration
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "[CHECK] Kiểm tra cấu hình environment..."
            
            # Kiểm tra JWT_SECRET_KEY có tồn tại trong .env không
            if grep -q "JWT_SECRET_KEY=" .env; then
              JWT_LINE=\$(grep "JWT_SECRET_KEY=" .env)
              if [[ "\$JWT_LINE" == "JWT_SECRET_KEY=" ]]; then
                echo "[ERROR] JWT_SECRET_KEY rỗng trong file .env"
              else
                JWT_VALUE=\$(echo "\$JWT_LINE" | cut -d'=' -f2)
                if [[ "\$JWT_VALUE" == "" ]]; then
                  echo "[ERROR] JWT_SECRET_KEY không có giá trị"
                else
                  echo "[OK] JWT_SECRET_KEY đã được cấu hình (độ dài: \${#JWT_VALUE} ký tự)"
                fi
              fi
            else
              echo "[ERROR] Không tìm thấy JWT_SECRET_KEY trong file .env"
            fi
            
            echo "[INFO] Các biến môi trường chính trong .env:"
            grep -E "(GATEWAY_PORT|FRONTEND_PORT|IDENTITY_DB|COREFINANCE_DB|REDIS|RABBITMQ)" .env || echo "Không có biến môi trường chính"
            
            echo "[CHECK] Kiểm tra Docker Compose file:"
            if [ -f "docker-compose.yml" ]; then
              echo "[OK] docker-compose.yml exists"
            else
              echo "[ERROR] docker-compose.yml not found"
            fi
          EOF
        shell: bash

      - name: Check and Fix Docker Permissions
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            echo "[CHECK] Kiểm tra quyền Docker..."
            
            # Kiểm tra Docker daemon có chạy không
            if systemctl is-active --quiet docker 2>/dev/null || service docker status >/dev/null 2>&1; then
              echo "[OK] Docker daemon đang chạy"
            else
              echo "[ERROR] Docker daemon không chạy"
              sudo systemctl start docker || sudo service docker start || echo "[WARNING] Không thể start Docker daemon"
            fi
            
            # Kiểm tra user hiện tại có trong docker group không
            CURRENT_USER=\$(whoami)
            echo "[INFO] Current user: \$CURRENT_USER"
            
            if groups \$CURRENT_USER | grep -q docker; then
              echo "[OK] User \$CURRENT_USER đã trong docker group"
              USE_SUDO=""
            else
              echo "[WARNING] User \$CURRENT_USER chưa trong docker group"
              echo "[FIX] Thử thêm user vào docker group..."
              
              # Thử add user vào docker group
              if sudo usermod -aG docker \$CURRENT_USER 2>/dev/null; then
                echo "[OK] Đã thêm user vào docker group"
                echo "[INFO] Cần logout/login lại để group có hiệu lực"
                echo "[INFO] Sử dụng sudo cho session này"
                USE_SUDO="sudo"
              else
                echo "[WARNING] Không thể thêm user vào docker group, sử dụng sudo"
                USE_SUDO="sudo"
              fi
            fi
            
            # Test Docker access
            echo "[TEST] Test Docker access..."
            if docker ps >/dev/null 2>&1; then
              echo "[OK] Docker access thành công (không cần sudo)"
              USE_SUDO=""
            elif sudo docker ps >/dev/null 2>&1; then
              echo "[OK] Docker access thành công (cần sudo)"
              USE_SUDO="sudo"
            else
              echo "[ERROR] Không thể truy cập Docker daemon"
              echo "[DEBUG] Docker socket permissions:"
              ls -l /var/run/docker.sock
              echo "[DEBUG] Current user groups:"
              groups
              exit 1
            fi
            
            # Save sudo preference to environment for next steps
            echo "USE_SUDO=\$USE_SUDO" >> /tmp/docker_config
            echo "[OK] Docker permissions đã được kiểm tra và cấu hình"
          EOF
        shell: bash

      - name: Prepare application directories on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Tạo các thư mục cần thiết cho application
            mkdir -p uploads
            mkdir -p logs/frontend
            mkdir -p logs/identity
            mkdir -p logs/corefinance
            mkdir -p logs/excel
            mkdir -p logs/ocelot
            mkdir -p config/ssl
            
            # Set proper permissions
            chmod -R 755 uploads
            chmod -R 755 logs
            chmod -R 755 config
            
            echo "[OK] Prepared application directories on TrueNAS"
          EOF
        shell: bash

      - name: Pre-deployment health checks
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            echo "[CHECK] Pre-deployment health checks..."
            
            # Check Docker availability
            if command -v docker &> /dev/null; then
              echo "[OK] Docker is available"
              docker --version
            else
              echo "[ERROR] Docker is not installed"
              exit 1
            fi
            
            # Check Docker Compose availability
            if command -v docker &> /dev/null && docker compose version &> /dev/null; then
              echo "[OK] Docker Compose is available"
              docker compose version
            else
              echo "[ERROR] Docker Compose is not available"
              exit 1
            fi
            
            # Check disk space
            echo "[DISK] Disk space check:"
            df -h .
            
            # Check memory
            echo "[MEMORY] Memory check:"
            free -h
            
            echo "[OK] Pre-deployment checks completed"
          EOF
        shell: bash

      - name: Docker compose operations on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "[DOCKER] Working with Docker Compose in ${{ env.TRUENAS_DEPLOY_DIR }}"
            
            # Load environment variables
            source .env
            
            # Load Docker sudo preference from previous step
            if [ -f /tmp/docker_config ]; then
              source /tmp/docker_config
              echo "[INFO] Using Docker with sudo preference: '\$USE_SUDO'"
            else
              echo "[WARNING] Docker config not found, testing Docker access..."
              if docker ps >/dev/null 2>&1; then
                USE_SUDO=""
                echo "[OK] Docker access without sudo"
              elif sudo docker ps >/dev/null 2>&1; then
                USE_SUDO="sudo"
                echo "[OK] Docker access with sudo"
              else
                echo "[ERROR] No Docker access available"
                exit 1
              fi
            fi
            
            # Validate NUXT_BUILD_TARGET to prevent build errors
            if [ "\$NUXT_BUILD_TARGET" != "development" ] && [ "\$NUXT_BUILD_TARGET" != "production" ]; then
              echo "[WARNING] Invalid NUXT_BUILD_TARGET: '\$NUXT_BUILD_TARGET'. Using 'production' instead."
              export NUXT_BUILD_TARGET=production
              # Update .env file with corrected value
              sed -i 's/^NUXT_BUILD_TARGET=.*/NUXT_BUILD_TARGET=production/' .env
            fi
            echo "[INFO] Using NUXT_BUILD_TARGET: '\$NUXT_BUILD_TARGET'"
            
            echo "[PULL] Đang pull images mới nhất..."
            \$USE_SUDO docker compose pull || {
              echo "[ERROR] Failed to pull images"
              echo "[DEBUG] Docker compose version:"
              \$USE_SUDO docker compose version
              echo "[DEBUG] Available images:"
              \$USE_SUDO docker images
              exit 1
            }
            echo "[OK] Đã pull images thành công"
            
            echo "[BUILD] Đang build images cho tất cả các dịch vụ (nếu có thay đổi)..."
            \$USE_SUDO docker compose build --no-cache || {
              echo "[ERROR] Failed to build images"
              echo "[DEBUG] Docker compose file check:"
              cat docker-compose.yml | head -20
              echo "[DEBUG] Environment variables:"
              echo "NUXT_BUILD_TARGET=\$NUXT_BUILD_TARGET"
              echo "[DEBUG] Frontend service config:"
              grep -A 10 "frontend-nuxt:" docker-compose.yml
              exit 1
            }
            echo "[OK] Đã build images thành công"
            
            echo "[STOP] Dừng containers hiện tại (nếu đang chạy)..."
            \$USE_SUDO docker compose down --remove-orphans --volumes || true 
            echo "[OK] Đã dừng các containers hiện tại"
            
            echo "[CLEAN] Dọn dẹp unused Docker resources..."
            \$USE_SUDO docker system prune -f
            echo "[OK] Đã dọn dẹp Docker resources"
            
            echo "[START] Khởi động TiHoMo system..."
            \$USE_SUDO docker compose up -d
            echo "[OK] Đã khởi động containers thành công"
            
            echo "[WAIT] Đang đợi services khởi động (60 giây)..."
            sleep 60
            
            echo "[STATUS] Kiểm tra trạng thái các container..."
            \$USE_SUDO docker compose ps
            
            echo "[CHECK] Kiểm tra logs gần đây..."
            \$USE_SUDO docker compose logs --tail=10 ocelot-gateway
            \$USE_SUDO docker compose logs --tail=10 frontend-nuxt
            \$USE_SUDO docker compose logs --tail=10 identity-api
            \$USE_SUDO docker compose logs --tail=10 corefinance-api
          EOF
        shell: bash

      - name: Verify deployment health
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.skip_health_checks != true }}
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Load environment variables
            source .env
            
            # Load Docker sudo preference
            if [ -f /tmp/docker_config ]; then
              source /tmp/docker_config
            else
              # Fallback check
              if docker ps >/dev/null 2>&1; then
                USE_SUDO=""
              else
                USE_SUDO="sudo"
              fi
            fi
            
            echo "[HEALTH] Kiểm tra health của các services..."
            
            # Function to check service health
            check_service_health() {
              local service_name=\$1
              local health_url=\$2
              local max_attempts=5
              local attempt=1
              
              echo "[CHECK] Checking \$service_name health..."
              
              while [ \$attempt -le \$max_attempts ]; do
                if \$USE_SUDO docker compose exec -T \$service_name curl -f \$health_url > /dev/null 2>&1; then
                  echo "[OK] \$service_name is healthy"
                  return 0
                else
                  echo "[WAIT] \$service_name not ready yet (attempt \$attempt/\$max_attempts)"
                  sleep 10
                  ((attempt++))
                fi
              done
              
              echo "[ERROR] \$service_name failed health check"
              return 1
            }
            
            # Check Gateway health
            if check_service_health "ocelot-gateway" "http://localhost:8080/health"; then
              echo "[OK] Gateway is healthy"
            else
              echo "[ERROR] Gateway health check failed"
              \$USE_SUDO docker compose logs --tail=20 ocelot-gateway
            fi
            
            # Check Frontend health
            if check_service_health "frontend-nuxt" "http://localhost:3000/"; then
              echo "[OK] Frontend is healthy"
            else
              echo "[ERROR] Frontend health check failed"
              \$USE_SUDO docker compose logs --tail=20 frontend-nuxt
            fi
            
            # Check Identity API health
            if check_service_health "identity-api" "http://localhost:8080/health"; then
              echo "[OK] Identity API is healthy"
            else
              echo "[ERROR] Identity API health check failed"
              \$USE_SUDO docker compose logs --tail=20 identity-api
            fi
            
            # Check CoreFinance API health
            if check_service_health "corefinance-api" "http://localhost:8080/health"; then
              echo "[OK] CoreFinance API is healthy"
            else
              echo "[ERROR] CoreFinance API health check failed"
              \$USE_SUDO docker compose logs --tail=20 corefinance-api
            fi
            
            echo "[CHECK] Tổng quan trạng thái tất cả services:"
            \$USE_SUDO docker compose ps
            
            echo "[DISK] Disk usage after deployment:"
            df -h .
            
            echo "[MEMORY] Memory usage after deployment:"
            free -h
          EOF
        shell: bash

      - name: Display deployment information
        run: |
          echo "[DEPLOY] TiHoMo system đã được triển khai thành công trên TrueNAS."
          echo ""
          echo "[STATUS] Thông tin triển khai:"
          echo "  - Environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}"
          echo "  - Trigger Type: ${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic (Push)' }}"
          echo "  - Frontend: http://<TRUENAS_IP>:${{ vars.FRONTEND_PORT || '3500' }}"
          echo "  - API Gateway: http://<TRUENAS_IP>:${{ vars.GATEWAY_PORT || '5000' }}"
          echo "  - Grafana Dashboard: http://<TRUENAS_IP>:${{ vars.GRAFANA_PORT || '3002' }}"
          echo "  - RabbitMQ Management: http://<TRUENAS_IP>:${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}"
          echo "  - pgAdmin: http://<TRUENAS_IP>:${{ vars.PGADMIN_PORT || '8081' }}"
          echo "  - Prometheus: http://<TRUENAS_IP>:${{ vars.PROMETHEUS_PORT || '9090' }}"
          echo ""
          echo "[INFO] Thông tin deployment:"
          echo "  - Nhánh: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Thời gian: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "  - Environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || 'staging') }}"
          echo ""
          echo "[OK] TRIỂN KHAI HOÀN TẤT THÀNH CÔNG"
        shell: bash
        
      - name: Send Discord success/failure notification
        if: success() || failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '[OK] **Triển khai TiHoMo lên TrueNAS THÀNH CÔNG!**' || '[ERROR] **Triển khai TiHoMo lên TrueNAS THẤT BẠI!**' }}
            
            [STATUS] **Thông tin triển khai:**
            • **Nhánh:** `${{ github.ref_name }}`
            • **Environment:** `${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}`
            • **Trigger:** `${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic' }}`
            • **Frontend:** `http://<TRUENAS_IP>:${{ vars.FRONTEND_PORT || '3500' }}`
            • **API Gateway:** `http://<TRUENAS_IP>:${{ vars.GATEWAY_PORT || '5000' }}`
            • **Grafana:** `http://<TRUENAS_IP>:${{ vars.GRAFANA_PORT || '3002' }}`
            • **Commit:** `${{ github.sha }}`
            
            **Services Status:**
            • **Frontend (Nuxt):** ${{ job.status == 'success' && 'Đang chạy' || 'Lỗi khởi động' }}
            • **API Gateway (Ocelot):** ${{ job.status == 'success' && 'Đang chạy' || 'Lỗi khởi động' }}
            • **Identity API:** ${{ job.status == 'success' && 'Đang chạy' || 'Lỗi khởi động' }}
            • **CoreFinance API:** ${{ job.status == 'success' && 'Đang chạy' || 'Lỗi khởi động' }}
            • **Databases:** ${{ job.status == 'success' && 'Operational' || 'Issues detected' }}
            • **Monitoring:** ${{ job.status == 'success' && 'Active' || 'Inactive' }}
            
            [Xem Chi Tiết Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord timeout notification
        if: cancelled()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            [TIMEOUT] **Triển khai TiHoMo ĐÃ BỊ HỦY do timeout (> 30 phút)!**
            
            [STATUS] **Thông tin:**
            • **Nhánh:** `${{ github.ref_name }}`
            • **Thời gian:** Vượt quá 30 phút
            • **Environment:** `${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}`
            • **Trigger:** `${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic' }}`
            
            [CHECK] **Có thể do:**
            • Docker build quá lâu
            • Network connectivity issues
            • Resource constraints trên TrueNAS
            • Database initialization timeout
            
            [Xem Chi Tiết Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
