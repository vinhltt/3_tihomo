name: Auto Deploy TiHoMo to TrueNAS

on:
  push:
    branches: [ master, develop ]
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng v·ªõi t√πy ch·ªçn environment
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_health_checks:
        description: 'Skip health checks (for testing)'
        required: false
        default: false
        type: boolean

# Chia group concurrency theo t·ª´ng branch (m·ªói branch s·∫Ω c√≥ h√†ng ƒë·ª£i ri√™ng)
# N·∫øu c√≥ workflow m·ªõi tr√™n c√πng m·ªôt branch, workflow c≈© s·∫Ω b·ªã cancel, ch·ªâ gi·ªØ l·∫°i workflow m·ªõi nh·∫•t
concurrency:
  group: tihomo-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest # S·ª≠ d·ª•ng GitHub-hosted runner
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}
    # ƒê·∫∑t th·ªùi gian timeout cho to√†n b·ªô job n√†y l√† 30 ph√∫t
    timeout-minutes: 30 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Required Secrets and Variables
        run: |
          echo "üîç Ki·ªÉm tra c√°c secrets v√† variables c·∫ßn thi·∫øt..."
          
          # Ki·ªÉm tra c√°c secrets quan tr·ªçng
          MISSING_SECRETS=()
          
          if [ -z "${{ secrets.JWT_SECRET_KEY }}" ]; then
            MISSING_SECRETS+=("JWT_SECRET_KEY")
          else
            echo "‚úÖ JWT_SECRET_KEY: C√≥ (ƒë·ªô d√†i: ${#JWT_SECRET_KEY} k√Ω t·ª±)"
          fi
          
          if [ -z "${{ secrets.IDENTITY_DB_PASSWORD }}" ]; then
            MISSING_SECRETS+=("IDENTITY_DB_PASSWORD")
          else
            echo "‚úÖ IDENTITY_DB_PASSWORD: C√≥"
          fi
          
          if [ -z "${{ secrets.COREFINANCE_DB_PASSWORD }}" ]; then
            MISSING_SECRETS+=("COREFINANCE_DB_PASSWORD")
          else
            echo "‚úÖ COREFINANCE_DB_PASSWORD: C√≥"
          fi
          
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            MISSING_SECRETS+=("REDIS_PASSWORD")
          else
            echo "‚úÖ REDIS_PASSWORD: C√≥"
          fi
          
          if [ -z "${{ secrets.RABBITMQ_PASSWORD }}" ]; then
            MISSING_SECRETS+=("RABBITMQ_PASSWORD")
          else
            echo "‚úÖ RABBITMQ_PASSWORD: C√≥"
          fi
          
          if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
            echo "‚ùå Thi·∫øu c√°c secrets sau:"
            printf '%s\n' "${MISSING_SECRETS[@]}"
            echo "üîß Vui l√≤ng c·∫•u h√¨nh t·∫°i: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          echo "‚úÖ T·∫•t c·∫£ secrets c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
        shell: bash
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          echo "Runner HOME directory is: $HOME" # In th∆∞ m·ª•c nh√†
          # C√†i ƒë·∫∑t cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"

          # T·∫°o th∆∞ m·ª•c $HOME/.ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$HOME/.ssh"
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH s·ª≠ d·ª•ng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config" # S·ª≠ d·ª•ng $HOME
          
          chmod 600 "$HOME/.ssh/config"
          echo "‚úÖ SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: DEBUG - Verify SSH Config File
        run: |
          echo "--- Verifying SSH config file ---"
          if [ -f "$HOME/.ssh/config" ]; then
            echo "‚úÖ SSH Config file exists at $HOME/.ssh/config"
            echo "--- Contents of $HOME/.ssh/config ---"
            cat "$HOME/.ssh/config"
            echo "-------------------------------------"
            echo "--- Listing $HOME/.ssh directory ---"
            ls -la "$HOME/.ssh"
            echo "------------------------------------"
          else
            echo "‚ùå SSH Config file NOT FOUND at $HOME/.ssh/config"
            # C·ªë g·∫Øng li·ªát k√™ th∆∞ m·ª•c $HOME n·∫øu c√≥ th·ªÉ ƒë·ªÉ xem c·∫•u tr√∫c
            echo "--- Listing $HOME directory ---"
            ls -la "$HOME"
            echo "-------------------------------"
            exit 1 # G√¢y l·ªói n·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i
          fi
        shell: bash

      - name: Prepare deploy directory on TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' ƒë√£ c·∫•u h√¨nh
          # Th√™m -F "$HOME/.ssh/config" v√†o l·ªánh ssh ƒë·ªÉ ch·ªâ ƒë·ªãnh r√µ r√†ng
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/uploads
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/logs
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/config
            echo "‚úÖ Prepared TrueNAS deploy directory: ${{ env.TRUENAS_DEPLOY_DIR }}"
          EOF
        shell: bash

      - name: Sync project files to TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' v√† ch·ªâ ƒë·ªãnh t·ªáp c·∫•u h√¨nh SSH r√µ r√†ng cho rsync
          # v·ªõi $HOME
          rsync -avz -e "ssh -F $HOME/.ssh/config" \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'node_modules/' \
            --exclude 'bin/' \
            --exclude 'obj/' \
            --exclude '*.log' \
            --exclude 'TestResults/' \
            --exclude '.vs/' \
            --exclude '.vscode/' \
            --exclude 'uploads/' \
            --exclude 'logs/' \
            --delete \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/"
          echo "‚úÖ Project files synced to TrueNAS"
        shell: bash

      - name: Create .env file on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel "cat > ${{ env.TRUENAS_DEPLOY_DIR }}/.env <<EOF
          # Project name
          COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME || 'tihomo' }}
          
          # Core Configuration
          GATEWAY_PORT=${{ vars.GATEWAY_PORT || '5000' }}
          FRONTEND_PORT=${{ vars.FRONTEND_PORT || '3500' }}
          JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}'
          
          # Database Configuration - Identity
          IDENTITY_DB_USERNAME=${{ secrets.IDENTITY_DB_USERNAME || 'identity_user' }}
          IDENTITY_DB_PASSWORD='${{ secrets.IDENTITY_DB_PASSWORD }}'
          IDENTITY_DB_PORT=${{ vars.IDENTITY_DB_PORT || '5831' }}
          
          # Database Configuration - CoreFinance
          COREFINANCE_DB_USERNAME=${{ secrets.COREFINANCE_DB_USERNAME || 'corefinance_user' }}
          COREFINANCE_DB_PASSWORD='${{ secrets.COREFINANCE_DB_PASSWORD }}'
          COREFINANCE_DB_PORT=${{ vars.COREFINANCE_DB_PORT || '5832' }}
          
          # Database Configuration - MoneyManagement
          MONEYMANAGEMENT_DB_USERNAME=${{ secrets.MONEYMANAGEMENT_DB_USERNAME || 'money_user' }}
          MONEYMANAGEMENT_DB_PASSWORD='${{ secrets.MONEYMANAGEMENT_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          MONEYMANAGEMENT_DB_PORT=${{ vars.MONEYMANAGEMENT_DB_PORT || '5835' }}
          
          # Database Configuration - PlanningInvestment
          PLANNINGINVESTMENT_DB_USERNAME=${{ secrets.PLANNINGINVESTMENT_DB_USERNAME || 'planning_user' }}
          PLANNINGINVESTMENT_DB_PASSWORD='${{ secrets.PLANNINGINVESTMENT_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          PLANNINGINVESTMENT_DB_PORT=${{ vars.PLANNINGINVESTMENT_DB_PORT || '5836' }}
          
          # Database Configuration - Reporting
          REPORTING_DB_PASSWORD='${{ secrets.REPORTING_DB_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          REPORTING_DB_PORT=${{ vars.REPORTING_DB_PORT || '5837' }}
          
          # Redis Configuration
          REDIS_PORT=${{ vars.REDIS_PORT || '6379' }}
          REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}'
          
          # RabbitMQ Configuration
          RABBITMQ_PORT=${{ vars.RABBITMQ_PORT || '5672' }}
          RABBITMQ_MANAGEMENT_PORT=${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}
          RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}'
          
          # Monitoring Configuration
          PROMETHEUS_PORT=${{ vars.PROMETHEUS_PORT || '9090' }}
          GRAFANA_PORT=${{ vars.GRAFANA_PORT || '3002' }}
          GRAFANA_ADMIN_PASSWORD='${{ secrets.GRAFANA_ADMIN_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          LOKI_PORT=${{ vars.LOKI_PORT || '3100' }}
          
          # Development Tools
          PGADMIN_PORT=${{ vars.PGADMIN_PORT || '8081' }}
          PGADMIN_PASSWORD='${{ secrets.PGADMIN_PASSWORD || secrets.IDENTITY_DB_PASSWORD }}'
          MAILHOG_SMTP_PORT=${{ vars.MAILHOG_SMTP_PORT || '1025' }}
          MAILHOG_UI_PORT=${{ vars.MAILHOG_UI_PORT || '8025' }}
          
          # Nginx Configuration
          NGINX_HTTP_PORT=${{ vars.NGINX_HTTP_PORT || '8082' }}
          NGINX_HTTPS_PORT=${{ vars.NGINX_HTTPS_PORT || '8443' }}
          
          # Network Configuration
          DOCKER_NETWORK_SUBNET=${{ vars.DOCKER_NETWORK_SUBNET || '172.20.0.0/16' }}
          
          # Application Environment
          NODE_ENV=${{ vars.NODE_ENV || 'production' }}
          ASPNETCORE_ENVIRONMENT=${{ vars.ASPNETCORE_ENVIRONMENT || 'Production' }}
          
          # OAuth Configuration
          APP_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.APP_PUBLIC_GOOGLE_CLIENT_ID }}
          
          # JWT Configuration
          JWT_ISSUER=${{ vars.JWT_ISSUER || 'http://localhost:5000' }}
          JWT_AUDIENCE_OCELOT_GATEWAY=${{ vars.JWT_AUDIENCE_OCELOT_GATEWAY || 'TiHoMo.Gateway' }}
          JWT_AUDIENCE_IDENTITY_API=${{ vars.JWT_AUDIENCE_IDENTITY_API || 'TiHoMo.Identity' }}
          JWT_AUDIENCE_COREFINANCE_API=${{ vars.JWT_AUDIENCE_COREFINANCE_API || 'TiHoMo.CoreFinance' }}
          
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ vars.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ vars.TZ || 'Asia/Ho_Chi_Minh' }}
          
          # Build Configuration
          NUXT_BUILD_TARGET=${{ vars.NUXT_BUILD_TARGET || 'production' }}
          NUXT_DEV_SSR=${{ vars.NUXT_DEV_SSR || 'false' }}
          NUXT_DEBUG=${{ vars.NUXT_DEBUG || 'false' }}
          NUXT_DEV_TOOLS=${{ vars.NUXT_DEV_TOOLS || 'false' }}
          NUXT_TELEMETRY_DISABLED=1
          
          # Logging Configuration
          LOG_LEVEL=${{ vars.LOG_LEVEL || 'info' }}
          LOG_FORMAT=${{ vars.LOG_FORMAT || 'json' }}
          
          # Feature Toggles
          ENABLE_PWA=${{ vars.ENABLE_PWA || 'false' }}
          ENABLE_ANALYTICS=${{ vars.ENABLE_ANALYTICS || 'false' }}
          
          # Deployment Information
          DEPLOY_BRANCH=${{ github.ref_name }}
          DEPLOY_COMMIT=${{ github.sha }}
          DEPLOY_TIME=\$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          echo '‚úÖ .env file created on TrueNAS at ${{ env.TRUENAS_DEPLOY_DIR }}/.env'"
        shell: bash

      - name: Debug Environment Configuration
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üîç Ki·ªÉm tra c·∫•u h√¨nh environment..."
            
            # Ki·ªÉm tra JWT_SECRET_KEY c√≥ t·ªìn t·∫°i trong .env kh√¥ng
            if grep -q "JWT_SECRET_KEY=" .env; then
              JWT_LINE=\$(grep "JWT_SECRET_KEY=" .env)
              if [[ "\$JWT_LINE" == "JWT_SECRET_KEY=" ]]; then
                echo "‚ùå JWT_SECRET_KEY r·ªóng trong file .env"
              else
                JWT_VALUE=\$(echo "\$JWT_LINE" | cut -d'=' -f2)
                if [[ "\$JWT_VALUE" == "" ]]; then
                  echo "‚ùå JWT_SECRET_KEY kh√¥ng c√≥ gi√° tr·ªã"
                else
                  echo "‚úÖ JWT_SECRET_KEY ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh (ƒë·ªô d√†i: \${#JWT_VALUE} k√Ω t·ª±)"
                fi
              fi
            else
              echo "‚ùå Kh√¥ng t√¨m th·∫•y JWT_SECRET_KEY trong file .env"
            fi
            
            echo "üìã C√°c bi·∫øn m√¥i tr∆∞·ªùng ch√≠nh trong .env:"
            grep -E "(GATEWAY_PORT|FRONTEND_PORT|IDENTITY_DB|COREFINANCE_DB|REDIS|RABBITMQ)" .env || echo "Kh√¥ng c√≥ bi·∫øn m√¥i tr∆∞·ªùng ch√≠nh"
            
            echo "üîç Ki·ªÉm tra Docker Compose file:"
            if [ -f "docker-compose.yml" ]; then
              echo "‚úÖ docker-compose.yml exists"
            else
              echo "‚ùå docker-compose.yml not found"
            fi
          EOF
        shell: bash

      - name: Prepare application directories on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt cho application
            mkdir -p uploads
            mkdir -p logs/frontend
            mkdir -p logs/identity
            mkdir -p logs/corefinance
            mkdir -p logs/excel
            mkdir -p logs/ocelot
            mkdir -p config/ssl
            
            # Set proper permissions
            chmod -R 755 uploads
            chmod -R 755 logs
            chmod -R 755 config
            
            echo "‚úÖ Prepared application directories on TrueNAS"
          EOF
        shell: bash

      - name: Pre-deployment health checks
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            echo "üîç Pre-deployment health checks..."
            
            # Check Docker availability
            if command -v docker &> /dev/null; then
              echo "‚úÖ Docker is available"
              docker --version
            else
              echo "‚ùå Docker is not installed"
              exit 1
            fi
            
            # Check Docker Compose availability
            if command -v docker &> /dev/null && docker compose version &> /dev/null; then
              echo "‚úÖ Docker Compose is available"
              docker compose version
            else
              echo "‚ùå Docker Compose is not available"
              exit 1
            fi
            
            # Check disk space
            echo "üíæ Disk space check:"
            df -h .
            
            # Check memory
            echo "üß† Memory check:"
            free -h
            
            echo "‚úÖ Pre-deployment checks completed"
          EOF
        shell: bash

      - name: Docker compose operations on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üê≥ Working with Docker Compose in ${{ env.TRUENAS_DEPLOY_DIR }}"
            
            # Load environment variables
            source .env
            
            echo "üîÑ ƒêang pull images m·ªõi nh·∫•t..."
            docker compose pull
            echo "‚úÖ ƒê√£ pull images th√†nh c√¥ng"
            
            echo "üî® ƒêang build images cho t·∫•t c·∫£ c√°c d·ªãch v·ª• (n·∫øu c√≥ thay ƒë·ªïi)..."
            docker compose build --no-cache
            echo "‚úÖ ƒê√£ build images th√†nh c√¥ng"
            
            echo "‚èπÔ∏è  D·ª´ng containers hi·ªán t·∫°i (n·∫øu ƒëang ch·∫°y)..."
            docker compose down --remove-orphans --volumes || true 
            echo "‚úÖ ƒê√£ d·ª´ng c√°c containers hi·ªán t·∫°i"
            
            echo "üßπ D·ªçn d·∫πp unused Docker resources..."
            docker system prune -f
            echo "‚úÖ ƒê√£ d·ªçn d·∫πp Docker resources"
            
            echo "üöÄ Kh·ªüi ƒë·ªông TiHoMo system..."
            docker compose up -d
            echo "‚úÖ ƒê√£ kh·ªüi ƒë·ªông containers th√†nh c√¥ng"
            
            echo "‚è≥ ƒêang ƒë·ª£i services kh·ªüi ƒë·ªông (60 gi√¢y)..."
            sleep 60
            
            echo "üìä Ki·ªÉm tra tr·∫°ng th√°i c√°c container..."
            docker compose ps
            
            echo "üîç Ki·ªÉm tra logs g·∫ßn ƒë√¢y..."
            docker compose logs --tail=10 ocelot-gateway
            docker compose logs --tail=10 frontend-nuxt
            docker compose logs --tail=10 identity-api
            docker compose logs --tail=10 corefinance-api
          EOF
        shell: bash

      - name: Verify deployment health
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.skip_health_checks != true }}
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Load environment variables
            source .env
            
            echo "üè• Ki·ªÉm tra health c·ªßa c√°c services..."
            
            # Function to check service health
            check_service_health() {
              local service_name=\$1
              local health_url=\$2
              local max_attempts=5
              local attempt=1
              
              echo "üîç Checking \$service_name health..."
              
              while [ \$attempt -le \$max_attempts ]; do
                if docker compose exec -T \$service_name curl -f \$health_url > /dev/null 2>&1; then
                  echo "‚úÖ \$service_name is healthy"
                  return 0
                else
                  echo "‚è≥ \$service_name not ready yet (attempt \$attempt/\$max_attempts)"
                  sleep 10
                  ((attempt++))
                fi
              done
              
              echo "‚ùå \$service_name failed health check"
              return 1
            }
            
            # Check Gateway health
            if check_service_health "ocelot-gateway" "http://localhost:8080/health"; then
              echo "‚úÖ Gateway is healthy"
            else
              echo "‚ùå Gateway health check failed"
              docker compose logs --tail=20 ocelot-gateway
            fi
            
            # Check Frontend health
            if check_service_health "frontend-nuxt" "http://localhost:3000/"; then
              echo "‚úÖ Frontend is healthy"
            else
              echo "‚ùå Frontend health check failed"
              docker compose logs --tail=20 frontend-nuxt
            fi
            
            # Check Identity API health
            if check_service_health "identity-api" "http://localhost:8080/health"; then
              echo "‚úÖ Identity API is healthy"
            else
              echo "‚ùå Identity API health check failed"
              docker compose logs --tail=20 identity-api
            fi
            
            # Check CoreFinance API health
            if check_service_health "corefinance-api" "http://localhost:8080/health"; then
              echo "‚úÖ CoreFinance API is healthy"
            else
              echo "‚ùå CoreFinance API health check failed"
              docker compose logs --tail=20 corefinance-api
            fi
            
            echo "üîç T·ªïng quan tr·∫°ng th√°i t·∫•t c·∫£ services:"
            docker compose ps
            
            echo "üíæ Disk usage after deployment:"
            df -h .
            
            echo "üß† Memory usage after deployment:"
            free -h
          EOF
        shell: bash

      - name: Display deployment information
        run: |
          echo "üåê TiHoMo system ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng tr√™n TrueNAS."
          echo ""
          echo "üìä Th√¥ng tin tri·ªÉn khai:"
          echo "  üîπ **Environment:** ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}"
          echo "  üîπ **Trigger Type:** ${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic (Push)' }}"
          echo "  üîπ Frontend:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.FRONTEND_PORT || '3500' }}"
          echo "  üîπ API Gateway:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.GATEWAY_PORT || '5000' }}"
          echo "  üîπ Grafana Dashboard:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.GRAFANA_PORT || '3002' }}"
          echo "  üîπ RabbitMQ Management:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.RABBITMQ_MANAGEMENT_PORT || '15672' }}"
          echo "  üîπ pgAdmin:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.PGADMIN_PORT || '8081' }}"
          echo "  üîπ Prometheus:"
          echo "     Truy c·∫≠p t·∫°i: http://<TRUENAS_IP>:${{ vars.PROMETHEUS_PORT || '9090' }}"
          echo ""
          echo "üîß Th√¥ng tin deployment:"
          echo "  ‚Ä¢ **Nh√°nh:** ${{ github.ref_name }}"
          echo "  ‚Ä¢ **Commit:** ${{ github.sha }}"
          echo "  ‚Ä¢ **Th·ªùi gian:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "  ‚Ä¢ **Environment:** ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || 'staging') }}"
          echo ""
          echo "‚úÖ TRI·ªÇN KHAI HO√ÄN T·∫§T TH√ÄNH C√îNG"
        shell: bash
        
      - name: Send Discord success/failure notification
        if: success() || failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '‚úÖ **Tri·ªÉn khai TiHoMo l√™n TrueNAS TH√ÄNH C√îNG!**' || '‚ùå **Tri·ªÉn khai TiHoMo l√™n TrueNAS TH·∫§T B·∫†I!**' }}
            
            üìä **Th√¥ng tin tri·ªÉn khai:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **Environment:** `${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}`
            ‚Ä¢ **Trigger:** `${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic' }}`
            ‚Ä¢ **Frontend:** `http://<TRUENAS_IP>:${{ vars.FRONTEND_PORT || '3500' }}`
            ‚Ä¢ **API Gateway:** `http://<TRUENAS_IP>:${{ vars.GATEWAY_PORT || '5000' }}`
            ‚Ä¢ **Grafana:** `http://<TRUENAS_IP>:${{ vars.GRAFANA_PORT || '3002' }}`
            ‚Ä¢ **Commit:** `${{ github.sha }}`
            
            üèóÔ∏è **Services Status:**
            ‚Ä¢ **Frontend (Nuxt):** ${{ job.status == 'success' && 'ƒêang ch·∫°y' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **API Gateway (Ocelot):** ${{ job.status == 'success' && 'ƒêang ch·∫°y' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **Identity API:** ${{ job.status == 'success' && 'ƒêang ch·∫°y' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **CoreFinance API:** ${{ job.status == 'success' && 'ƒêang ch·∫°y' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **Databases:** ${{ job.status == 'success' && 'Operational' || 'Issues detected' }}
            ‚Ä¢ **Monitoring:** ${{ job.status == 'success' && 'Active' || 'Inactive' }}
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord timeout notification
        if: cancelled()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ‚è±Ô∏è **Tri·ªÉn khai TiHoMo ƒê√É B·ªä H·ª¶Y do timeout (> 30 ph√∫t)!**
            
            üìä **Th√¥ng tin:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **Th·ªùi gian:** V∆∞·ª£t qu√° 30 ph√∫t
            ‚Ä¢ **Environment:** `${{ github.event_name == 'workflow_dispatch' && inputs.environment || (github.ref_name == 'master' && 'production' || github.ref_name == 'develop' && 'development' || github.ref_name == 'staging' && 'staging' || 'development') }}`
            ‚Ä¢ **Trigger:** `${{ github.event_name == 'workflow_dispatch' && 'Manual Run' || 'Automatic' }}`
            
            üîç **C√≥ th·ªÉ do:**
            ‚Ä¢ Docker build qu√° l√¢u
            ‚Ä¢ Network connectivity issues
            ‚Ä¢ Resource constraints tr√™n TrueNAS
            ‚Ä¢ Database initialization timeout
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 