name: Deploy Cloudflared Tunnel

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - stop
          - restart
          - logs
      tunnel_name:
        description: 'Cloudflare tunnel name (optional, uses default if not specified)'
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'development'
        type: string
      action:
        description: 'Action to perform'
        required: false
        default: 'deploy'
        type: string
      tunnel_name:
        description: 'Cloudflare tunnel name (optional, uses default if not specified)'
        required: false
        type: string
  push:
    branches:
      - master
      - develop
    paths:
      - 'docker-compose.cloudflared.yml'
      - '.github/workflows/deploy-cloudflared-tunnel.yml'

concurrency:
  group: tihomo-cloudflared-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # Deploy or manage Cloudflared tunnel
  manage-cloudflared:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}
    timeout-minutes: 10

    steps:
      - name: "[1/6] Checkout code"
        uses: actions/checkout@v4

      - name: "[2/6] Setup environment variables"
        run: |
          CLEAN_ENV=$(echo "${{ inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'development') }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${CLEAN_ENV}" >> $GITHUB_ENV
          echo "ACTION=${{ inputs.action || 'deploy' }}" >> $GITHUB_ENV
          echo "TUNNEL_NAME=${{ inputs.tunnel_name || 'tihomo-tunnel' }}" >> $GITHUB_ENV

      - name: "[3/6] Setup SSH and Cloudflared"
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          
          mkdir -p "$HOME/.ssh"
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking accept-new" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"

      - name: "[4/6] Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: "[5/6] Manage Cloudflared tunnel"
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel bash -s << 'EOF'
          set -e
          cd ${{ env.TRUENAS_DEPLOY_DIR }}
          
          # Check Docker access
          if docker ps >/dev/null 2>&1; then
            USE_SUDO=""
          else
            USE_SUDO="sudo"
          fi
          
          echo "Deploying Cloudflared tunnel..."
          
          # Ensure tunnel token is available
          if [ ! -f .env ] || ! grep -q "CLOUDFLARED_TUNNEL_TOKEN=" .env; then
            [ ! -f .env ] && touch .env
            if ! grep -q "CLOUDFLARED_TUNNEL_TOKEN=" .env; then
              echo "" >> .env
              echo "CLOUDFLARED_TUNNEL_TOKEN=${{ secrets.CLOUDFLARED_TUNNEL_TOKEN }}" >> .env
            fi
            echo "Tunnel token configured"
          fi
          
          case "${{ env.ACTION }}" in
            deploy)
              echo "Deploying Cloudflared tunnel..."
              $USE_SUDO docker compose -f docker-compose.cloudflared.yml up -d
              echo "Cloudflared tunnel started"
              ;;
              
            stop)
              echo "Stopping Cloudflared tunnel..."
              $USE_SUDO docker compose -f docker-compose.cloudflared.yml down
              ;;
              
            restart)
              echo "Restarting Cloudflared tunnel..."
              $USE_SUDO docker compose -f docker-compose.cloudflared.yml restart cloudflared
              ;;
              
            logs)
              echo "Cloudflared tunnel logs:"
              $USE_SUDO docker compose -f docker-compose.cloudflared.yml logs --tail=30 cloudflared
              ;;
              
            *)
              echo "Unknown action: ${{ env.ACTION }}"
              exit 1
              ;;
          esac
          EOF

      - name: "[6/6] Send notification"
        if: always()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && 'üåê **Cloudflared Tunnel Management SUCCESS**' || '‚ùå **Cloudflared Tunnel Management FAILED**' }}
            
            üöá **Tunnel Info:**
            ‚Ä¢ **Environment:** `${{ env.ENVIRONMENT }}`
            ‚Ä¢ **Action:** `${{ env.ACTION }}`
            ‚Ä¢ **Tunnel:** `${{ env.TUNNEL_NAME }}`
            ‚Ä¢ **Branch:** `${{ github.ref_name }}`
            
            ${{ job.status == 'success' && (env.ACTION == 'deploy' && 'üîó **External access tunnel is active!**' || env.ACTION == 'stop' && '‚èπÔ∏è **Tunnel stopped successfully**' || env.ACTION == 'restart' && 'üîÑ **Tunnel restarted successfully**' || 'üìã **Logs retrieved successfully**') || 'üö® **Check tunnel configuration and logs**' }}
            
            üí° **Access your services externally through Cloudflare tunnel**